const React = require('react');
const {
  useState,
  useEffect
} = React;
const {
  Box,
  Text,
  Newline,
  useFocus
} = require('ink');
const BigText = require('ink-big-text');
const Gradient = require('ink-gradient');
const axios = require('axios');

// Spotify client required parameters

const PlaylistInfo = props => {
  const [data, setData] = useState('');
  const [playlist, setPlaylist] = useState(null);
  const [tracks, setTracks] = useState([]);
  const {
    isFocused
  } = useFocus();
  useEffect(async () => {
    if (playlist !== '' && props.playlistId != '') {
      const temp = await axios.get(`/playlists/${props.playlistId}/tracks`);
      setTracks(temp.data.items.map((item, i) => /*#__PURE__*/React.createElement(Track, {
        id: i,
        trackName: item.track.name
      })));
    }
  }, [playlist]);
  useEffect(async () => {
    const temp = await axios.get('/me');
    setData(temp.data.display_name);
  }, []);
  useEffect(async () => {
    if (props.playlistId !== '') {
      const playlistInfo = await axios.get(`/playlists/${props.playlistId}`);
      setPlaylist(playlistInfo);
    }
  }, [props.playlistId]);
  return /*#__PURE__*/React.createElement(Box, {
    height: "100%",
    width: "100%",
    borderStyle: "single",
    flexDirection: "column",
    alignItems: "center",
    justifyContent: "center",
    padding: 2
  }, /*#__PURE__*/React.createElement(BigText, {
    height: "20%",
    text: playlist ? playlist.data.name : 'Playlist Name',
    font: "tiny"
  }), tracks);
};
const Track = props => {
  const {
    isFocused
  } = useFocus();
  return /*#__PURE__*/React.createElement(Box, {
    key: props.id
  }, /*#__PURE__*/React.createElement(Text, {
    color: isFocused ? 'green' : 'black'
  }, props.trackName), /*#__PURE__*/React.createElement(Newline, null));
};
module.exports = PlaylistInfo;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsIkJveCIsIlRleHQiLCJOZXdsaW5lIiwidXNlRm9jdXMiLCJCaWdUZXh0IiwiR3JhZGllbnQiLCJheGlvcyIsIlBsYXlsaXN0SW5mbyIsInByb3BzIiwiZGF0YSIsInNldERhdGEiLCJwbGF5bGlzdCIsInNldFBsYXlsaXN0IiwidHJhY2tzIiwic2V0VHJhY2tzIiwiaXNGb2N1c2VkIiwicGxheWxpc3RJZCIsInRlbXAiLCJnZXQiLCJpdGVtcyIsIm1hcCIsIml0ZW0iLCJpIiwidHJhY2siLCJuYW1lIiwiZGlzcGxheV9uYW1lIiwicGxheWxpc3RJbmZvIiwiVHJhY2siLCJpZCIsInRyYWNrTmFtZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJQbGF5bGlzdEluZm8uanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3QgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gPSBSZWFjdDtcbmNvbnN0IHsgQm94LCBUZXh0LCBOZXdsaW5lLCB1c2VGb2N1cyB9ID0gcmVxdWlyZSgnaW5rJyk7XG5jb25zdCBCaWdUZXh0ID0gcmVxdWlyZSgnaW5rLWJpZy10ZXh0Jyk7XG5jb25zdCBHcmFkaWVudCA9IHJlcXVpcmUoJ2luay1ncmFkaWVudCcpXG5jb25zdCBheGlvcyA9IHJlcXVpcmUoJ2F4aW9zJylcblxuXG4vLyBTcG90aWZ5IGNsaWVudCByZXF1aXJlZCBwYXJhbWV0ZXJzXG5cbmNvbnN0IFBsYXlsaXN0SW5mbyA9IChwcm9wcykgPT57XG5cbiAgICBjb25zdCBbZGF0YSxzZXREYXRhXSA9IHVzZVN0YXRlKCcnKVxuICAgIGNvbnN0IFtwbGF5bGlzdCxzZXRQbGF5bGlzdF0gPSB1c2VTdGF0ZShudWxsKVxuICAgIGNvbnN0IFt0cmFja3Msc2V0VHJhY2tzXSA9IHVzZVN0YXRlKFtdKVxuICAgIGNvbnN0IHtpc0ZvY3VzZWR9ID0gdXNlRm9jdXMoKVxuXG4gICAgdXNlRWZmZWN0KGFzeW5jICgpID0+IHtcbiAgICAgICAgaWYocGxheWxpc3QgIT09ICcnICYmIHByb3BzLnBsYXlsaXN0SWQgIT0gJycpe1xuICAgICAgICAgICAgY29uc3QgdGVtcCA9IGF3YWl0IGF4aW9zLmdldChgL3BsYXlsaXN0cy8ke3Byb3BzLnBsYXlsaXN0SWR9L3RyYWNrc2ApXG4gICAgICAgICAgICBzZXRUcmFja3ModGVtcC5kYXRhLml0ZW1zLm1hcCgoaXRlbSxpKSA9PlxuICAgICAgICAgICAgICAgIDxUcmFjayBpZD17aX0gdHJhY2tOYW1lPXtpdGVtLnRyYWNrLm5hbWV9IC8+XG4gICAgICAgICAgICApKVxuICAgICAgICB9XG4gICAgfSxbcGxheWxpc3RdKVxuXG4gICAgdXNlRWZmZWN0KGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgdGVtcCA9IGF3YWl0IGF4aW9zLmdldCgnL21lJylcbiAgICAgICAgc2V0RGF0YSh0ZW1wLmRhdGEuZGlzcGxheV9uYW1lKVxuICAgIH0sW10pXG5cbiAgICB1c2VFZmZlY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgICBpZihwcm9wcy5wbGF5bGlzdElkICE9PSAnJyl7XG4gICAgICAgICAgICBjb25zdCBwbGF5bGlzdEluZm8gPSBhd2FpdCBheGlvcy5nZXQoYC9wbGF5bGlzdHMvJHtwcm9wcy5wbGF5bGlzdElkfWApXG4gICAgICAgICAgICBzZXRQbGF5bGlzdChwbGF5bGlzdEluZm8pXG4gICAgICAgIH1cbiAgICB9LFtwcm9wcy5wbGF5bGlzdElkXSlcblxuICAgIHJldHVybihcbiAgICAgICAgPEJveCBoZWlnaHQ9e1wiMTAwJVwifSB3aWR0aD17XCIxMDAlXCJ9IGJvcmRlclN0eWxlPSdzaW5nbGUnIGZsZXhEaXJlY3Rpb249J2NvbHVtbicgYWxpZ25JdGVtcz0nY2VudGVyJyBqdXN0aWZ5Q29udGVudD0nY2VudGVyJyBwYWRkaW5nPXsyfT5cbiAgICAgICAgICAgIDxCaWdUZXh0XG4gICAgICAgICAgICAgICAgaGVpZ2h0PXtcIjIwJVwifVxuICAgICAgICAgICAgICB0ZXh0PSB7cGxheWxpc3QgPyBwbGF5bGlzdC5kYXRhLm5hbWUgOiAnUGxheWxpc3QgTmFtZSd9XG4gICAgICAgICAgICAgIGZvbnQ9J3RpbnknXG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAge3RyYWNrc31cbiAgICAgICAgPC9Cb3g+XG4gICAgKVxufVxuXG5jb25zdCBUcmFjayA9IChwcm9wcykgPT57XG4gICAgY29uc3Qge2lzRm9jdXNlZH0gPSB1c2VGb2N1cygpO1xuXG4gICAgcmV0dXJuKFxuICAgICAgICA8Qm94IGtleT17cHJvcHMuaWR9PlxuICAgICAgICAgICAgPFRleHQgY29sb3I9e2lzRm9jdXNlZCA/ICdncmVlbicgOiAnYmxhY2snfT57cHJvcHMudHJhY2tOYW1lfTwvVGV4dD5cbiAgICAgICAgICAgIDxOZXdsaW5lIC8+XG4gICAgICAgIDwvQm94PlxuICAgIClcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBQbGF5bGlzdEluZm87XG5cbiJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBTyxDQUFDO0FBQzlCLE1BQU07RUFBRUMsUUFBUTtFQUFFQztBQUFVLENBQUMsR0FBR0gsS0FBSztBQUNyQyxNQUFNO0VBQUVJLEdBQUc7RUFBRUMsSUFBSTtFQUFFQyxPQUFPO0VBQUVDO0FBQVMsQ0FBQyxHQUFHTixPQUFPLENBQUMsS0FBSyxDQUFDO0FBQ3ZELE1BQU1PLE9BQU8sR0FBR1AsT0FBTyxDQUFDLGNBQWMsQ0FBQztBQUN2QyxNQUFNUSxRQUFRLEdBQUdSLE9BQU8sQ0FBQyxjQUFjLENBQUM7QUFDeEMsTUFBTVMsS0FBSyxHQUFHVCxPQUFPLENBQUMsT0FBTyxDQUFDOztBQUc5Qjs7QUFFQSxNQUFNVSxZQUFZLEdBQUlDLEtBQUssSUFBSTtFQUUzQixNQUFNLENBQUNDLElBQUksRUFBQ0MsT0FBTyxDQUFDLEdBQUdaLFFBQVEsQ0FBQyxFQUFFLENBQUM7RUFDbkMs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