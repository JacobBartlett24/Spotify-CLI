const React = require('react');
const {
  useState,
  useEffect
} = React;
const {
  Box,
  Text,
  Newline,
  useFocus
} = require('ink');
const BigText = require('ink-big-text');
const Gradient = require('ink-gradient');
const axios = require('axios');

// Spotify client required parameters

const PlaylistInfo = props => {
  const [data, setData] = useState('');
  const [playlist, setPlaylist] = useState(null);
  const [tracks, setTracks] = useState([]);
  const {
    isFocused
  } = useFocus();
  useEffect(async () => {
    if (playlist !== '' && props.playlistId != '') {
      const temp = await axios.get(`/playlists/${props.playlistId}/tracks`);
      setTracks(temp.data.items.map((item, i) => /*#__PURE__*/React.createElement(Track, {
        id: i,
        key: i,
        trackName: item.track.name
      })));
    }
  }, [playlist]);
  useEffect(async () => {
    const temp = await axios.get('/me');
    setData(temp.data.display_name);
  }, []);
  useEffect(async () => {
    if (props.playlistId !== '') {
      const playlistInfo = await axios.get(`/playlists/${props.playlistId}`);
      setPlaylist(playlistInfo);
    }
  }, [props.playlistId]);
  return /*#__PURE__*/React.createElement(Box, {
    height: "100%",
    width: "100%",
    borderStyle: "single",
    flexDirection: "column",
    alignItems: "center",
    justifyContent: "center",
    padding: 2
  }, /*#__PURE__*/React.createElement(BigText, {
    height: "20%",
    text: playlist ? playlist.data.name : 'Playlist Name',
    font: "tiny"
  }), tracks);
};
const Track = props => {
  const {
    isFocused
  } = useFocus();
  return /*#__PURE__*/React.createElement(Box, {
    key: props.id
  }, /*#__PURE__*/React.createElement(Text, {
    color: isFocused ? 'green' : 'black'
  }, props.trackName), /*#__PURE__*/React.createElement(Newline, null));
};
module.exports = PlaylistInfo;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsIkJveCIsIlRleHQiLCJOZXdsaW5lIiwidXNlRm9jdXMiLCJCaWdUZXh0IiwiR3JhZGllbnQiLCJheGlvcyIsIlBsYXlsaXN0SW5mbyIsInByb3BzIiwiZGF0YSIsInNldERhdGEiLCJwbGF5bGlzdCIsInNldFBsYXlsaXN0IiwidHJhY2tzIiwic2V0VHJhY2tzIiwiaXNGb2N1c2VkIiwicGxheWxpc3RJZCIsInRlbXAiLCJnZXQiLCJpdGVtcyIsIm1hcCIsIml0ZW0iLCJpIiwidHJhY2siLCJuYW1lIiwiZGlzcGxheV9uYW1lIiwicGxheWxpc3RJbmZvIiwiVHJhY2siLCJpZCIsInRyYWNrTmFtZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJQbGF5bGlzdEluZm8uanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3QgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gPSBSZWFjdDtcbmNvbnN0IHsgQm94LCBUZXh0LCBOZXdsaW5lLCB1c2VGb2N1cyB9ID0gcmVxdWlyZSgnaW5rJyk7XG5jb25zdCBCaWdUZXh0ID0gcmVxdWlyZSgnaW5rLWJpZy10ZXh0Jyk7XG5jb25zdCBHcmFkaWVudCA9IHJlcXVpcmUoJ2luay1ncmFkaWVudCcpXG5jb25zdCBheGlvcyA9IHJlcXVpcmUoJ2F4aW9zJylcblxuXG4vLyBTcG90aWZ5IGNsaWVudCByZXF1aXJlZCBwYXJhbWV0ZXJzXG5cbmNvbnN0IFBsYXlsaXN0SW5mbyA9IChwcm9wcykgPT57XG5cbiAgICBjb25zdCBbZGF0YSxzZXREYXRhXSA9IHVzZVN0YXRlKCcnKVxuICAgIGNvbnN0IFtwbGF5bGlzdCxzZXRQbGF5bGlzdF0gPSB1c2VTdGF0ZShudWxsKVxuICAgIGNvbnN0IFt0cmFja3Msc2V0VHJhY2tzXSA9IHVzZVN0YXRlKFtdKVxuICAgIGNvbnN0IHtpc0ZvY3VzZWR9ID0gdXNlRm9jdXMoKVxuXG4gICAgdXNlRWZmZWN0KGFzeW5jICgpID0+IHtcbiAgICAgICAgaWYocGxheWxpc3QgIT09ICcnICYmIHByb3BzLnBsYXlsaXN0SWQgIT0gJycpe1xuICAgICAgICAgICAgY29uc3QgdGVtcCA9IGF3YWl0IGF4aW9zLmdldChgL3BsYXlsaXN0cy8ke3Byb3BzLnBsYXlsaXN0SWR9L3RyYWNrc2ApXG4gICAgICAgICAgICBzZXRUcmFja3ModGVtcC5kYXRhLml0ZW1zLm1hcCgoaXRlbSxpKSA9PlxuICAgICAgICAgICAgICAgIDxUcmFjayBpZD17aX0ga2V5PXtpfSB0cmFja05hbWU9e2l0ZW0udHJhY2submFtZX0gLz5cbiAgICAgICAgICAgICkpXG4gICAgICAgIH1cbiAgICB9LFtwbGF5bGlzdF0pXG5cbiAgICB1c2VFZmZlY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCB0ZW1wID0gYXdhaXQgYXhpb3MuZ2V0KCcvbWUnKVxuICAgICAgICBzZXREYXRhKHRlbXAuZGF0YS5kaXNwbGF5X25hbWUpXG4gICAgfSxbXSlcblxuICAgIHVzZUVmZmVjdChhc3luYyAoKSA9PiB7XG4gICAgICAgIGlmKHByb3BzLnBsYXlsaXN0SWQgIT09ICcnKXtcbiAgICAgICAgICAgIGNvbnN0IHBsYXlsaXN0SW5mbyA9IGF3YWl0IGF4aW9zLmdldChgL3BsYXlsaXN0cy8ke3Byb3BzLnBsYXlsaXN0SWR9YClcbiAgICAgICAgICAgIHNldFBsYXlsaXN0KHBsYXlsaXN0SW5mbylcbiAgICAgICAgfVxuICAgIH0sW3Byb3BzLnBsYXlsaXN0SWRdKVxuXG4gICAgcmV0dXJuKFxuICAgICAgICA8Qm94IGhlaWdodD17XCIxMDAlXCJ9IHdpZHRoPXtcIjEwMCVcIn0gYm9yZGVyU3R5bGU9J3NpbmdsZScgZmxleERpcmVjdGlvbj0nY29sdW1uJyBhbGlnbkl0ZW1zPSdjZW50ZXInIGp1c3RpZnlDb250ZW50PSdjZW50ZXInIHBhZGRpbmc9ezJ9PlxuICAgICAgICAgICAgPEJpZ1RleHRcbiAgICAgICAgICAgICAgICBoZWlnaHQ9e1wiMjAlXCJ9XG4gICAgICAgICAgICAgIHRleHQ9IHtwbGF5bGlzdCA/IHBsYXlsaXN0LmRhdGEubmFtZSA6ICdQbGF5bGlzdCBOYW1lJ31cbiAgICAgICAgICAgICAgZm9udD0ndGlueSdcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICB7dHJhY2tzfVxuICAgICAgICA8L0JveD5cbiAgICApXG59XG5cbmNvbnN0IFRyYWNrID0gKHByb3BzKSA9PntcbiAgICBjb25zdCB7aXNGb2N1c2VkfSA9IHVzZUZvY3VzKCk7XG5cbiAgICByZXR1cm4oXG4gICAgICAgIDxCb3gga2V5PXtwcm9wcy5pZH0+XG4gICAgICAgICAgICA8VGV4dCBjb2xvcj17aXNGb2N1c2VkID8gJ2dyZWVuJyA6ICdibGFjayd9Pntwcm9wcy50cmFja05hbWV9PC9UZXh0PlxuICAgICAgICAgICAgPE5ld2xpbmUgLz5cbiAgICAgICAgPC9Cb3g+XG4gICAgKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFBsYXlsaXN0SW5mbztcblxuIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFPLENBQUM7QUFDOUIsTUFBTTtFQUFFQyxRQUFRO0VBQUVDO0FBQVUsQ0FBQyxHQUFHSCxLQUFLO0FBQ3JDLE1BQU07RUFBRUksR0FBRztFQUFFQyxJQUFJO0VBQUVDLE9BQU87RUFBRUM7QUFBUyxDQUFDLEdBQUdOLE9BQU8sQ0FBQyxLQUFLLENBQUM7QUFDdkQsTUFBTU8sT0FBTyxHQUFHUCxPQUFPLENBQUMsY0FBYyxDQUFDO0FBQ3ZDLE1BQU1RLFFBQVEsR0FBR1IsT0FBTyxDQUFDLGNBQWMsQ0FBQztBQUN4QyxNQUFNUyxLQUFLLEdBQUdULE9BQU8sQ0FBQyxPQUFPLENBQUM7O0FBRzlCOztBQUVBLE1BQU1VLFlBQVksR0FBSUMsS0FBSyxJQUFJO0VBRTNCLE1BQU0sQ0FBQ0MsSUFBSSxFQUFDQyxPQUFPLENBQUMsR0FBR1osUUFBUSxDQUFDLEVBQUUsQ0FB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