const React = require('react');
const {
  useState,
  useEffect
} = React;
const {
  Box,
  Text,
  Newline,
  useFocus
} = require('ink');
const BigText = require('ink-big-text');
const Gradient = require('ink-gradient');
const axios = require('axios');

// Spotify client required parameters

const PlaylistInfo = props => {
  const [data, setData] = useState('');
  const [playlist, setPlaylist] = useState(null);
  const [tracks, setTracks] = useState([]);
  const {
    isFocused
  } = useFocus();
  useEffect(async () => {
    if (playlist !== '') {
      const temp = await axios.get(`/playlists/${props.playlistId}/tracks`);
      setTracks(temp.data.items.map((item, i) => /*#__PURE__*/React.createElement(Track, {
        key: i,
        trackName: item.data.name
      })));
    }
  }, [playlist]);
  useEffect(async () => {
    const temp = await axios.get('/me');
    setData(temp.data.display_name);
  }, []);
  useEffect(async () => {
    if (props.playlistId !== '') {
      const playlistInfo = await axios.get(`/playlists/${props.playlistId}`);
      setPlaylist(playlistInfo);
    }
  }, [props.playlistId]);
  return /*#__PURE__*/React.createElement(Box, {
    height: "100%",
    width: "100%",
    borderStyle: "single",
    flexDirection: "column",
    alignItems: "center",
    justifyContent: "center",
    padding: 2
  }, /*#__PURE__*/React.createElement(BigText, {
    height: "20%",
    text: playlist ? playlist.data.name : 'Playlist Name',
    font: "tiny"
  }), tracks);
};
const Track = props => {
  const {
    isFocused
  } = useFocus();
  return /*#__PURE__*/React.createElement(Box, {
    key: props.key
  }, /*#__PURE__*/React.createElement(Text, {
    color: isFocused ? 'green' : 'black'
  }, props.trackName), /*#__PURE__*/React.createElement(Newline, null));
};
module.exports = PlaylistInfo;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsIkJveCIsIlRleHQiLCJOZXdsaW5lIiwidXNlRm9jdXMiLCJCaWdUZXh0IiwiR3JhZGllbnQiLCJheGlvcyIsIlBsYXlsaXN0SW5mbyIsInByb3BzIiwiZGF0YSIsInNldERhdGEiLCJwbGF5bGlzdCIsInNldFBsYXlsaXN0IiwidHJhY2tzIiwic2V0VHJhY2tzIiwiaXNGb2N1c2VkIiwidGVtcCIsImdldCIsInBsYXlsaXN0SWQiLCJpdGVtcyIsIm1hcCIsIml0ZW0iLCJpIiwibmFtZSIsImRpc3BsYXlfbmFtZSIsInBsYXlsaXN0SW5mbyIsIlRyYWNrIiwia2V5IiwidHJhY2tOYW1lIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIlBsYXlsaXN0SW5mby5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSA9IFJlYWN0O1xuY29uc3QgeyBCb3gsIFRleHQsIE5ld2xpbmUsIHVzZUZvY3VzIH0gPSByZXF1aXJlKCdpbmsnKTtcbmNvbnN0IEJpZ1RleHQgPSByZXF1aXJlKCdpbmstYmlnLXRleHQnKTtcbmNvbnN0IEdyYWRpZW50ID0gcmVxdWlyZSgnaW5rLWdyYWRpZW50JylcbmNvbnN0IGF4aW9zID0gcmVxdWlyZSgnYXhpb3MnKVxuXG5cbi8vIFNwb3RpZnkgY2xpZW50IHJlcXVpcmVkIHBhcmFtZXRlcnNcblxuY29uc3QgUGxheWxpc3RJbmZvID0gKHByb3BzKSA9PntcblxuICAgIGNvbnN0IFtkYXRhLHNldERhdGFdID0gdXNlU3RhdGUoJycpXG4gICAgY29uc3QgW3BsYXlsaXN0LHNldFBsYXlsaXN0XSA9IHVzZVN0YXRlKG51bGwpXG4gICAgY29uc3QgW3RyYWNrcyxzZXRUcmFja3NdID0gdXNlU3RhdGUoW10pXG4gICAgY29uc3Qge2lzRm9jdXNlZH0gPSB1c2VGb2N1cygpXG5cbiAgICB1c2VFZmZlY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgICBpZihwbGF5bGlzdCAhPT0gJycpe1xuICAgICAgICAgICAgY29uc3QgdGVtcCA9IGF3YWl0IGF4aW9zLmdldChgL3BsYXlsaXN0cy8ke3Byb3BzLnBsYXlsaXN0SWR9L3RyYWNrc2ApXG4gICAgICAgICAgICBzZXRUcmFja3ModGVtcC5kYXRhLml0ZW1zLm1hcCgoaXRlbSxpKSA9PlxuICAgICAgICAgICAgICAgIDxUcmFjayBrZXk9e2l9IHRyYWNrTmFtZT17aXRlbS5kYXRhLm5hbWV9IC8+XG4gICAgICAgICAgICApKVxuICAgICAgICB9XG4gICAgfSxbcGxheWxpc3RdKVxuXG4gICAgdXNlRWZmZWN0KGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgdGVtcCA9IGF3YWl0IGF4aW9zLmdldCgnL21lJylcbiAgICAgICAgc2V0RGF0YSh0ZW1wLmRhdGEuZGlzcGxheV9uYW1lKVxuICAgIH0sW10pXG5cbiAgICB1c2VFZmZlY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgICBpZihwcm9wcy5wbGF5bGlzdElkICE9PSAnJyl7XG4gICAgICAgICAgICBjb25zdCBwbGF5bGlzdEluZm8gPSBhd2FpdCBheGlvcy5nZXQoYC9wbGF5bGlzdHMvJHtwcm9wcy5wbGF5bGlzdElkfWApXG4gICAgICAgICAgICBzZXRQbGF5bGlzdChwbGF5bGlzdEluZm8pXG4gICAgICAgIH1cbiAgICB9LFtwcm9wcy5wbGF5bGlzdElkXSlcblxuICAgIHJldHVybihcbiAgICAgICAgPEJveCBoZWlnaHQ9e1wiMTAwJVwifSB3aWR0aD17XCIxMDAlXCJ9IGJvcmRlclN0eWxlPSdzaW5nbGUnIGZsZXhEaXJlY3Rpb249J2NvbHVtbicgYWxpZ25JdGVtcz0nY2VudGVyJyBqdXN0aWZ5Q29udGVudD0nY2VudGVyJyBwYWRkaW5nPXsyfT5cbiAgICAgICAgICAgIDxCaWdUZXh0XG4gICAgICAgICAgICAgICAgaGVpZ2h0PXtcIjIwJVwifVxuICAgICAgICAgICAgICB0ZXh0PSB7cGxheWxpc3QgPyBwbGF5bGlzdC5kYXRhLm5hbWUgOiAnUGxheWxpc3QgTmFtZSd9XG4gICAgICAgICAgICAgIGZvbnQ9J3RpbnknXG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAge3RyYWNrc31cbiAgICAgICAgPC9Cb3g+XG4gICAgKVxufVxuXG5jb25zdCBUcmFjayA9IChwcm9wcykgPT57XG4gICAgY29uc3Qge2lzRm9jdXNlZH0gPSB1c2VGb2N1cygpO1xuXG4gICAgcmV0dXJuKFxuICAgICAgICA8Qm94IGtleT17cHJvcHMua2V5fT5cbiAgICAgICAgICAgIDxUZXh0IGNvbG9yPXtpc0ZvY3VzZWQgPyAnZ3JlZW4nIDogJ2JsYWNrJ30+e3Byb3BzLnRyYWNrTmFtZX08L1RleHQ+XG4gICAgICAgICAgICA8TmV3bGluZSAvPlxuICAgICAgICA8L0JveD5cbiAgICApXG59XG5cbm1vZHVsZS5leHBvcnRzID0gUGxheWxpc3RJbmZvO1xuXG4iXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQU8sQ0FBQztBQUM5QixNQUFNO0VBQUVDLFFBQVE7RUFBRUM7QUFBVSxDQUFDLEdBQUdILEtBQUs7QUFDckMsTUFBTTtFQUFFSSxHQUFHO0VBQUVDLElBQUk7RUFBRUMsT0FBTztFQUFFQztBQUFTLENBQUMsR0FBR04sT0FBTyxDQUFDLEtBQUssQ0FBQztBQUN2RCxNQUFNTyxPQUFPLEdBQUdQLE9BQU8sQ0FBQyxjQUFjLENBQUM7QUFDdkMsTUFBTVEsUUFBUSxHQUFHUixPQUFPLENBQUMsY0FBYyxDQUFDO0FBQ3hDLE1BQU1TLEtBQUssR0FBR1QsT0FBTyxDQUFDLE9BQU8sQ0FBQzs7QUFHOUI7O0FBRUEsTUFBTVUsWUFBWSxHQUFJQyxLQUFLLElBQUk7RUFFM0IsTUFBTSxDQUFDQyxJQUFJLEVBQUNDLE9BQU8sQ0FBQyxHQUFHWixRQUFRLENBQUMsRUFBRSxDQUFDO0VBQ25DLE1BQU0sQ0FBQ2EsUUFBUSxFQUFDQyxXQUFXLENBQUMsR0FBR2QsUUFBUSxDQUFDLElBQUksQ0FBQztFQUM3QyxNQUFNLENBQUNlLE1BQU0sRUFBQ0MsU0FBUyxDQUFDLEdBQUdoQixRQUFRLENBQUMsRUFBRSxDQUFDO0VBQ3ZDLE1BQU07SUFBQ2lCO0VBQVMsQ0FBQyxHQUFHWixRQUFRLEVBQUU7RUFFOUJKLFNBQVMsQ0FBQyxZQUFZO0lBQ2xCLElBQUdZLFFBQVEsS0FBSyxFQUFFLEVBQUM7TUFDZixNQUFNSyxJQUFJLEdBQUcsTUFBTVYsS0FBSyxDQUFDVyxHQUFHLENBQUUsY0FBYVQsS0FBSyxDQUFDVSxVQUFXLFNBQVEsQ0FBQztNQUNyRUosU0FBUyxDQUFDRSxJQUFJLENBQUNQLElBQUksQ0FBQ1UsS0FBSyxDQUFDQyxHQUFHLENBQUMsQ0FBQ0MsSUFBSSxFQUFDQyxDQUFDLGtCQUNqQyxvQkFBQyxLQUFLO1FBQUMsR0FBRyxFQUFFQSxDQUFFO1FBQUMsU0FBUyxFQUFFRCxJQUFJLENBQUNaLElBQUksQ0FBQ2M7TUFBSyxFQUFHLENBQy9DLENBQUM7SUFDTjtFQUNKLENBQUMsRUFBQyxDQUFDWixRQUFRLENBQUMsQ0FBQztFQUViWixTQUFTLENBQUMsWUFBWTtJQUNsQixNQUFNaUIsSUFBSSxHQUFHLE1BQU1WLEtBQUssQ0FBQ1csR0FBRyxDQUFDLEtBQUssQ0FBQztJQUNuQ1AsT0FBTyxDQUFDTSxJQUFJLENBQUNQLElBQUksQ0FBQ2UsWUFBWSxDQUFDO0VBQ25DLENBQUMsRUFBQyxFQUFFLENBQUM7RUFFTHpCLFNBQVMsQ0FBQyxZQUFZO0lBQ2xCLElBQUdTLEtBQUssQ0FBQ1UsVUFBVSxLQUFLLEVBQUUsRUFBQztNQUN2QixNQUFNTyxZQUFZLEdBQUcsTUFBTW5CLEtBQUssQ0FBQ1csR0FBRyxDQUFFLGNBQWFULEtBQUssQ0FBQ1UsVUFBVyxFQUFDLENBQUM7TUFDdEVOLFdBQVcsQ0FBQ2EsWUFBWSxDQUFDO0lBQzdCO0VBQ0osQ0FBQyxFQUFDLENBQUNqQixLQUFLLENBQUNVLFVBQVUsQ0FBQyxDQUFDO0VBRXJCLG9CQUNJLG9CQUFDLEdBQUc7SUFBQyxNQUFNLEVBQUUsTUFBTztJQUFDLEtBQUssRUFBRSxNQUFPO0lBQUMsV0FBVyxFQUFDLFFBQVE7SUFBQyxhQUFhLEVBQUMsUUFBUTtJQUFDLFVBQVUsRUFBQyxRQUFRO0lBQUMsY0FBYyxFQUFDLFFBQVE7SUFBQyxPQUFPLEVBQUU7RUFBRSxnQkFDbkksb0JBQUMsT0FBTztJQUNKLE1BQU0sRUFBRSxLQUFNO0lBQ2hCLElBQUksRUFBR1AsUUFBUSxHQUFHQSxRQUFRLENBQUNGLElBQUksQ0FBQ2MsSUFBSSxHQUFHLGVBQWdCO0lBQ3ZELElBQUksRUFBQztFQUFNLEVBQ1gsRUFDRFYsTUFBTSxDQUNMO0FBRWQsQ0FBQztBQUVELE1BQU1hLEtBQUssR0FBSWxCLEtBQUssSUFBSTtFQUNwQixNQUFNO0lBQUNPO0VBQVMsQ0FBQyxHQUFHWixRQUFRLEVBQUU7RUFFOUIsb0JBQ0ksb0JBQUMsR0FBRztJQUFDLEdBQUcsRUFBRUssS0FBSyxDQUFDbUI7RUFBSSxnQkFDaEIsb0JBQUMsSUFBSTtJQUFDLEtBQUssRUFBRVosU0FBUyxHQUFHLE9BQU8sR0FBRztFQUFRLEdBQUVQLEtBQUssQ0FBQ29CLFNBQVMsQ0FBUSxlQUNwRSxvQkFBQyxPQUFPLE9BQUcsQ0FDVDtBQUVkLENBQUM7QUFFREMsTUFBTSxDQUFDQyxPQUFPLEdBQUd2QixZQUFZIn0=