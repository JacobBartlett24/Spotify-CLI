const React = require('react');
const {
  useState,
  useEffect
} = React;
const {
  Box,
  Text,
  Newline
} = require('ink');
const BigText = require('ink-big-text');
const Gradient = require('ink-gradient');
const axios = require('axios');

// Spotify client required parameters

const MainView = props => {
  const [data, setData] = useState('');
  const [playlist, setPlaylist] = useState(null);
  useEffect(async () => {
    const temp = await axios.get('/me');
    setData(temp.data.display_name);
  }, []);
  useEffect(async () => {
    if (props.playlistId !== '') {
      const playlistInfo = await axios.get(`/playlists/${props.playlistId}`);
      setPlaylist(playlistInfo);
    }
  }, [props.playlistId]);
  return /*#__PURE__*/React.createElement(Box, {
    height: "100%",
    width: "100%",
    borderStyle: "single",
    flexDirection: "column",
    alignItems: "center",
    justifyContent: "center",
    padding: 2
  }, /*#__PURE__*/React.createElement(BigText, {
    height: "20%",
    text: playlist ? playlist.data.name : 'Playlist Name',
    font: "tiny"
  }), /*#__PURE__*/React.createElement(Tracks, {
    id: playlist ? props.playlistId : ''
  }));
};
const Tracks = props => {
  const [tracks, setTracks] = useState([]);
  useEffect(async () => {
    if (props.id !== '') {
      const temp = await axios.get(`/playlists/${props.id}/tracks`);
      setTracks(temp.data.items.map((item, i) => /*#__PURE__*/React.createElement(Box, {
        key: i
      }, /*#__PURE__*/React.createElement(Text, null, item.track.name), /*#__PURE__*/React.createElement(Newline, null))));
    }
  }, [props.id]);
  return /*#__PURE__*/React.createElement(Box, {
    key: props.id,
    flexDirection: "column",
    height: "80%",
    width: "100%",
    borderStyle: "single"
  }, props.id ? tracks : /*#__PURE__*/React.createElement(Text, null, "no tracks"));
};
module.exports = MainView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsIkJveCIsIlRleHQiLCJOZXdsaW5lIiwiQmlnVGV4dCIsIkdyYWRpZW50IiwiYXhpb3MiLCJNYWluVmlldyIsInByb3BzIiwiZGF0YSIsInNldERhdGEiLCJwbGF5bGlzdCIsInNldFBsYXlsaXN0IiwidGVtcCIsImdldCIsImRpc3BsYXlfbmFtZSIsInBsYXlsaXN0SWQiLCJwbGF5bGlzdEluZm8iLCJuYW1lIiwiVHJhY2tzIiwidHJhY2tzIiwic2V0VHJhY2tzIiwiaWQiLCJpdGVtcyIsIm1hcCIsIml0ZW0iLCJpIiwidHJhY2siLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiTWFpblZpZXcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3QgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gPSBSZWFjdDtcbmNvbnN0IHsgQm94LCBUZXh0LCBOZXdsaW5lIH0gPSByZXF1aXJlKCdpbmsnKTtcbmNvbnN0IEJpZ1RleHQgPSByZXF1aXJlKCdpbmstYmlnLXRleHQnKTtcbmNvbnN0IEdyYWRpZW50ID0gcmVxdWlyZSgnaW5rLWdyYWRpZW50JylcbmNvbnN0IGF4aW9zID0gcmVxdWlyZSgnYXhpb3MnKVxuXG5cbi8vIFNwb3RpZnkgY2xpZW50IHJlcXVpcmVkIHBhcmFtZXRlcnNcblxuY29uc3QgTWFpblZpZXcgPSAocHJvcHMpID0+e1xuXG4gICAgY29uc3QgW2RhdGEsc2V0RGF0YV0gPSB1c2VTdGF0ZSgnJylcbiAgICBjb25zdCBbcGxheWxpc3Qsc2V0UGxheWxpc3RdID0gdXNlU3RhdGUobnVsbClcblxuICAgIHVzZUVmZmVjdChhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHRlbXAgPSBhd2FpdCBheGlvcy5nZXQoJy9tZScpXG4gICAgICAgIHNldERhdGEodGVtcC5kYXRhLmRpc3BsYXlfbmFtZSlcbiAgICB9LFtdKVxuXG4gICAgdXNlRWZmZWN0KGFzeW5jICgpID0+IHtcbiAgICAgICAgaWYocHJvcHMucGxheWxpc3RJZCAhPT0gJycpe1xuICAgICAgICAgICAgY29uc3QgcGxheWxpc3RJbmZvID0gYXdhaXQgYXhpb3MuZ2V0KGAvcGxheWxpc3RzLyR7cHJvcHMucGxheWxpc3RJZH1gKVxuICAgICAgICAgICAgc2V0UGxheWxpc3QocGxheWxpc3RJbmZvKVxuICAgICAgICB9XG4gICAgfSxbcHJvcHMucGxheWxpc3RJZF0pXG5cbiAgICByZXR1cm4oXG4gICAgICAgIDxCb3ggaGVpZ2h0PXtcIjEwMCVcIn0gd2lkdGg9e1wiMTAwJVwifSBib3JkZXJTdHlsZT0nc2luZ2xlJyBmbGV4RGlyZWN0aW9uPSdjb2x1bW4nIGFsaWduSXRlbXM9J2NlbnRlcicganVzdGlmeUNvbnRlbnQ9J2NlbnRlcicgcGFkZGluZz17Mn0+XG4gICAgICAgICAgICA8QmlnVGV4dFxuICAgICAgICAgICAgICAgIGhlaWdodD17XCIyMCVcIn1cbiAgICAgICAgICAgICAgdGV4dD0ge3BsYXlsaXN0ID8gcGxheWxpc3QuZGF0YS5uYW1lIDogJ1BsYXlsaXN0IE5hbWUnfVxuICAgICAgICAgICAgICBmb250PSd0aW55J1xuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxUcmFja3MgaWQ9e3BsYXlsaXN0ID8gcHJvcHMucGxheWxpc3RJZCA6ICcnfS8+XG5cbiAgICAgICAgPC9Cb3g+XG4gICAgKVxufVxuXG5jb25zdCBUcmFja3MgPSAocHJvcHMpID0+e1xuICAgIGNvbnN0IFt0cmFja3Msc2V0VHJhY2tzXSA9IHVzZVN0YXRlKFtdKVxuICAgIFxuICAgIHVzZUVmZmVjdChhc3luYyAoKSA9PiB7XG4gICAgICAgIGlmKHByb3BzLmlkICE9PSAnJyl7XG4gICAgICAgICAgICBjb25zdCB0ZW1wID0gYXdhaXQgYXhpb3MuZ2V0KGAvcGxheWxpc3RzLyR7cHJvcHMuaWR9L3RyYWNrc2ApXG4gICAgICAgICAgICBzZXRUcmFja3ModGVtcC5kYXRhLml0ZW1zLm1hcCgoaXRlbSxpKSA9PlxuICAgICAgICAgICAgICAgIDxCb3gga2V5PXtpfT5cbiAgICAgICAgICAgICAgICAgICAgPFRleHQ+e2l0ZW0udHJhY2submFtZX08L1RleHQ+XG4gICAgICAgICAgICAgICAgICAgIDxOZXdsaW5lIC8+XG4gICAgICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgICApKVxuICAgICAgICB9XG4gICAgfSxbcHJvcHMuaWRdKVxuXG5cbiAgICByZXR1cm4oXG4gICAgICAgIDxCb3gga2V5PXtwcm9wcy5pZH1mbGV4RGlyZWN0aW9uPSdjb2x1bW4nIGhlaWdodD17XCI4MCVcIn0gd2lkdGg9e1wiMTAwJVwifSBib3JkZXJTdHlsZT0nc2luZ2xlJz57cHJvcHMuaWQgPyB0cmFja3MgOiA8VGV4dD5ubyB0cmFja3M8L1RleHQ+fTwvQm94PlxuICAgIClcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBNYWluVmlldztcblxuIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFPLENBQUM7QUFDOUIsTUFBTTtFQUFFQyxRQUFRO0VBQUVDO0FBQVUsQ0FBQyxHQUFHSCxLQUFLO0FBQ3JDLE1BQU07RUFBRUksR0FBRztFQUFFQyxJQUFJO0VBQUVDO0FBQVEsQ0FBQyxHQUFHTCxPQUFPLENBQUMsS0FBSyxDQUFDO0FBQzdDLE1BQU1NLE9BQU8sR0FBR04sT0FBTyxDQUFDLGNBQWMsQ0FBQztBQUN2QyxNQUFNTyxRQUFRLEdBQUdQLE9BQU8sQ0FBQyxjQUFjLENBQUM7QUFDeEMsTUFBTVEsS0FBSyxHQUFHUixPQUFPLENBQUMsT0FBTyxDQUFDOztBQUc5Qjs7QUFFQSxNQUFNUyxRQUFRLEdBQUlDLEtBQUssSUFBSTtFQUV2QixNQUFNLENBQUNDLElBQUksRUFBQ0MsT0FBTyxDQUFDLEdBQUdYLFFBQVEsQ0FBQyxFQUFFLENBQUM7RUFDbkMsTUFBTSxDQUFDWSxRQUFRLEVBQUNDLFdBQVcsQ0FBQyxHQUFHYixRQUFRLENBQUMs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