const React = require('react');
const {
  useState,
  useEffect
} = React;
const {
  Box,
  Text,
  Newline
} = require('ink');
const BigText = require('ink-big-text');
const Gradient = require('ink-gradient');
const axios = require('axios');

// Spotify client required parameters

const MainView = props => {
  const [data, setData] = useState('');
  const [playlist, setPlaylist] = useState(null);
  useEffect(async () => {
    const temp = await axios.get('/me');
    setData(temp.data.display_name);
  }, []);
  useEffect(async () => {
    if (props.playlistId !== '') {
      const playlistInfo = await axios.get(`/playlists/${props.playlistId}`);
      setPlaylist(playlistInfo);
    }
  }, [props.playlistId]);
  return /*#__PURE__*/React.createElement(Box, {
    height: "100%",
    width: "100%",
    borderStyle: "single",
    flexDirection: "column",
    alignItems: "center",
    justifyContent: "center",
    padding: 2
  }, /*#__PURE__*/React.createElement(BigText, {
    text: playlist ? playlist.data.name : 'Playlist Name',
    font: "tiny"
  }), /*#__PURE__*/React.createElement(Tracks, {
    tracks: playlist ? playlist.data.tracks : ''
  }));
};
const Tracks = props => {
  return /*#__PURE__*/React.createElement(Text, null, props.tracks ? props.tracks.items[0] : 'no tracks');
};
module.exports = MainView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsIkJveCIsIlRleHQiLCJOZXdsaW5lIiwiQmlnVGV4dCIsIkdyYWRpZW50IiwiYXhpb3MiLCJNYWluVmlldyIsInByb3BzIiwiZGF0YSIsInNldERhdGEiLCJwbGF5bGlzdCIsInNldFBsYXlsaXN0IiwidGVtcCIsImdldCIsImRpc3BsYXlfbmFtZSIsInBsYXlsaXN0SWQiLCJwbGF5bGlzdEluZm8iLCJuYW1lIiwidHJhY2tzIiwiVHJhY2tzIiwiaXRlbXMiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiTWFpblZpZXcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3QgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gPSBSZWFjdDtcbmNvbnN0IHsgQm94LCBUZXh0LCBOZXdsaW5lIH0gPSByZXF1aXJlKCdpbmsnKTtcbmNvbnN0IEJpZ1RleHQgPSByZXF1aXJlKCdpbmstYmlnLXRleHQnKTtcbmNvbnN0IEdyYWRpZW50ID0gcmVxdWlyZSgnaW5rLWdyYWRpZW50JylcbmNvbnN0IGF4aW9zID0gcmVxdWlyZSgnYXhpb3MnKVxuXG5cbi8vIFNwb3RpZnkgY2xpZW50IHJlcXVpcmVkIHBhcmFtZXRlcnNcblxuY29uc3QgTWFpblZpZXcgPSAocHJvcHMpID0+e1xuXG4gICAgY29uc3QgW2RhdGEsc2V0RGF0YV0gPSB1c2VTdGF0ZSgnJylcbiAgICBjb25zdCBbcGxheWxpc3Qsc2V0UGxheWxpc3RdID0gdXNlU3RhdGUobnVsbClcblxuICAgIHVzZUVmZmVjdChhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHRlbXAgPSBhd2FpdCBheGlvcy5nZXQoJy9tZScpXG4gICAgICAgIHNldERhdGEodGVtcC5kYXRhLmRpc3BsYXlfbmFtZSlcbiAgICB9LFtdKVxuXG4gICAgdXNlRWZmZWN0KGFzeW5jICgpID0+IHtcbiAgICAgICAgaWYocHJvcHMucGxheWxpc3RJZCAhPT0gJycpe1xuICAgICAgICAgICAgY29uc3QgcGxheWxpc3RJbmZvID0gYXdhaXQgYXhpb3MuZ2V0KGAvcGxheWxpc3RzLyR7cHJvcHMucGxheWxpc3RJZH1gKVxuICAgICAgICAgICAgc2V0UGxheWxpc3QocGxheWxpc3RJbmZvKVxuICAgICAgICB9XG4gICAgfSxbcHJvcHMucGxheWxpc3RJZF0pXG5cbiAgICByZXR1cm4oXG4gICAgICAgIDxCb3ggaGVpZ2h0PXtcIjEwMCVcIn0gd2lkdGg9e1wiMTAwJVwifSBib3JkZXJTdHlsZT0nc2luZ2xlJyBmbGV4RGlyZWN0aW9uPSdjb2x1bW4nIGFsaWduSXRlbXM9J2NlbnRlcicganVzdGlmeUNvbnRlbnQ9J2NlbnRlcicgcGFkZGluZz17Mn0+XG4gICAgICAgICAgICA8QmlnVGV4dFxuICAgICAgICAgICAgICB0ZXh0PSB7cGxheWxpc3QgPyBwbGF5bGlzdC5kYXRhLm5hbWUgOiAnUGxheWxpc3QgTmFtZSd9XG4gICAgICAgICAgICAgIGZvbnQ9J3RpbnknXG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPFRyYWNrcyB0cmFja3M9e3BsYXlsaXN0ID8gcGxheWxpc3QuZGF0YS50cmFja3MgOiAnJ30vPlxuXG4gICAgICAgIDwvQm94PlxuICAgIClcbn1cblxuY29uc3QgVHJhY2tzID0gKHByb3BzKSA9PntcblxuICAgIHJldHVybihcbiAgICAgICAgXG4gICAgICAgIDxUZXh0Pntwcm9wcy50cmFja3MgPyBwcm9wcy50cmFja3MuaXRlbXNbMF0gOiAnbm8gdHJhY2tzJ308L1RleHQ+XG4gICAgKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE1haW5WaWV3O1xuXG4iXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQU8sQ0FBQztBQUM5QixNQUFNO0VBQUVDLFFBQVE7RUFBRUM7QUFBVSxDQUFDLEdBQUdILEtBQUs7QUFDckMsTUFBTTtFQUFFSSxHQUFHO0VBQUVDLElBQUk7RUFBRUM7QUFBUSxDQUFDLEdBQUdMLE9BQU8sQ0FBQyxLQUFLLENBQUM7QUFDN0MsTUFBTU0sT0FBTyxHQUFHTixPQUFPLENBQUMsY0FBYyxDQUFDO0FBQ3ZDLE1BQU1PLFFBQVEsR0FBR1AsT0FBTyxDQUFDLGNBQWMsQ0FBQztBQUN4QyxNQUFNUSxLQUFLLEdBQUdSLE9BQU8sQ0FBQyxPQUFPLENBQUM7O0FBRzlCOztBQUVBLE1BQU1TLFFBQVEsR0FBSUMsS0FBSyxJQUFJO0VBRXZCLE1BQU0sQ0FBQ0MsSUFBSSxFQUFDQyxPQUFPLENBQUMsR0FBR1gsUUFBUSxDQUFDLEVBQUUsQ0FBQztFQUNuQyxNQUFNLENBQUNZLFFBQVEsRUFBQ0MsV0FBVyxDQUFDLEdBQUdiLFFBQVEsQ0FBQyxJQUFJLENBQUM7RUFFN0NDLFNBQVMsQ0FBQyxZQUFZO0lBQ2xCLE1BQU1hLElBQUksR0FBRyxNQUFNUCxLQUFLLENBQUNRLEdBQUcsQ0FBQyxLQUFLLENBQUM7SUFDbkNKLE9BQU8sQ0FBQ0csSUFBSSxDQUFDSixJQUFJLENBQUNNLFlBQVksQ0FBQztFQUNuQyxDQUFDLEVBQUMsRUFBRSxDQUFDO0VBRUxmLFNBQVMsQ0FBQyxZQUFZO0lBQ2xCLElBQUdRLEtBQUssQ0FBQ1EsVUFBVSxLQUFLLEVBQUUsRUFBQztNQUN2QixNQUFNQyxZQUFZLEdBQUcsTUFBTVgsS0FBSyxDQUFDUSxHQUFHLENBQUUsY0FBYU4sS0FBSyxDQUFDUSxVQUFXLEVBQUMsQ0FBQztNQUN0RUosV0FBVyxDQUFDSyxZQUFZLENBQUM7SUFDN0I7RUFDSixDQUFDLEVBQUMsQ0FBQ1QsS0FBSyxDQUFDUSxVQUFVLENBQUMsQ0FBQztFQUVyQixvQkFDSSxvQkFBQyxHQUFHO0lBQUMsTUFBTSxFQUFFLE1BQU87SUFBQyxLQUFLLEVBQUUsTUFBTztJQUFDLFdBQVcsRUFBQyxRQUFRO0lBQUMsYUFBYSxFQUFDLFFBQVE7SUFBQyxVQUFVLEVBQUMsUUFBUTtJQUFDLGNBQWMsRUFBQyxRQUFRO0lBQUMsT0FBTyxFQUFFO0VBQUUsZ0JBQ25JLG9CQUFDLE9BQU87SUFDTixJQUFJLEVBQUdMLFFBQVEsR0FBR0EsUUFBUSxDQUFDRixJQUFJLENBQUNTLElBQUksR0FBRyxlQUFnQjtJQUN2RCxJQUFJLEVBQUM7RUFBTSxFQUNYLGVBQ0Ysb0JBQUMsTUFBTTtJQUFDLE1BQU0sRUFBRVAsUUFBUSxHQUFHQSxRQUFRLENBQUNGLElBQUksQ0FBQ1UsTUFBTSxHQUFHO0VBQUcsRUFBRSxDQUVyRDtBQUVkLENBQUM7QUFFRCxNQUFNQyxNQUFNLEdBQUlaLEtBQUssSUFBSTtFQUVyQixvQkFFSSxvQkFBQyxJQUFJLFFBQUVBLEtBQUssQ0FBQ1csTUFBTSxHQUFHWCxLQUFLLENBQUNXLE1BQU0sQ0FBQ0UsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBUTtBQUV6RSxDQUFDO0FBRURDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHaEIsUUFBUSJ9