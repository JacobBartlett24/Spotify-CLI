const React = require('react');
const {
  useState,
  useEffect
} = React;
const {
  Box,
  Text,
  Newline,
  useFocus
} = require('ink');
const BigText = require('ink-big-text');
const Gradient = require('ink-gradient');
const axios = require('axios');

// Spotify client required parameters

const MainView = props => {
  const [data, setData] = useState('');
  const [playlist, setPlaylist] = useState(null);
  useEffect(async () => {
    const temp = await axios.get('/me');
    setData(temp.data.display_name);
  }, []);
  useEffect(async () => {
    if (props.playlistId !== '') {
      const playlistInfo = await axios.get(`/playlists/${props.playlistId}`);
      setPlaylist(playlistInfo);
    }
  }, [props.playlistId]);
  return /*#__PURE__*/React.createElement(Box, {
    height: "100%",
    width: "100%",
    borderStyle: "single",
    flexDirection: "column",
    alignItems: "center",
    justifyContent: "center",
    padding: 2
  }, /*#__PURE__*/React.createElement(BigText, {
    height: "20%",
    text: playlist ? playlist.data.name : 'Playlist Name',
    font: "tiny"
  }), /*#__PURE__*/React.createElement(Tracks, {
    id: playlist ? props.playlistId : ''
  }));
};
const Tracks = props => {
  const [tracks, setTracks] = useState([]);
  const {
    isFocused
  } = useFocus();
  useEffect(async () => {
    if (props.id !== '') {
      const temp = await axios.get(`/playlists/${props.id}/tracks`);
      setTracks(temp.data.items.map((item, i) => /*#__PURE__*/React.createElement(Box, {
        key: i
      }, /*#__PURE__*/React.createElement(Text, {
        color: isFocused ? 'green' : 'white'
      }, item.track.name), /*#__PURE__*/React.createElement(Newline, null))));
    }
  }, [props.id]);
  return /*#__PURE__*/React.createElement(Box, {
    key: props.id,
    flexDirection: "column",
    height: "80%",
    width: "100%"
  }, props.id ? tracks : /*#__PURE__*/React.createElement(Text, null, "no tracks"));
};
module.exports = MainView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsIkJveCIsIlRleHQiLCJOZXdsaW5lIiwidXNlRm9jdXMiLCJCaWdUZXh0IiwiR3JhZGllbnQiLCJheGlvcyIsIk1haW5WaWV3IiwicHJvcHMiLCJkYXRhIiwic2V0RGF0YSIsInBsYXlsaXN0Iiwic2V0UGxheWxpc3QiLCJ0ZW1wIiwiZ2V0IiwiZGlzcGxheV9uYW1lIiwicGxheWxpc3RJZCIsInBsYXlsaXN0SW5mbyIsIm5hbWUiLCJUcmFja3MiLCJ0cmFja3MiLCJzZXRUcmFja3MiLCJpc0ZvY3VzZWQiLCJpZCIsIml0ZW1zIiwibWFwIiwiaXRlbSIsImkiLCJ0cmFjayIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJNYWluVmlldy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSA9IFJlYWN0O1xuY29uc3QgeyBCb3gsIFRleHQsIE5ld2xpbmUsIHVzZUZvY3VzIH0gPSByZXF1aXJlKCdpbmsnKTtcbmNvbnN0IEJpZ1RleHQgPSByZXF1aXJlKCdpbmstYmlnLXRleHQnKTtcbmNvbnN0IEdyYWRpZW50ID0gcmVxdWlyZSgnaW5rLWdyYWRpZW50JylcbmNvbnN0IGF4aW9zID0gcmVxdWlyZSgnYXhpb3MnKVxuXG5cbi8vIFNwb3RpZnkgY2xpZW50IHJlcXVpcmVkIHBhcmFtZXRlcnNcblxuY29uc3QgTWFpblZpZXcgPSAocHJvcHMpID0+e1xuXG4gICAgY29uc3QgW2RhdGEsc2V0RGF0YV0gPSB1c2VTdGF0ZSgnJylcbiAgICBjb25zdCBbcGxheWxpc3Qsc2V0UGxheWxpc3RdID0gdXNlU3RhdGUobnVsbClcblxuICAgIHVzZUVmZmVjdChhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHRlbXAgPSBhd2FpdCBheGlvcy5nZXQoJy9tZScpXG4gICAgICAgIHNldERhdGEodGVtcC5kYXRhLmRpc3BsYXlfbmFtZSlcbiAgICB9LFtdKVxuXG4gICAgdXNlRWZmZWN0KGFzeW5jICgpID0+IHtcbiAgICAgICAgaWYocHJvcHMucGxheWxpc3RJZCAhPT0gJycpe1xuICAgICAgICAgICAgY29uc3QgcGxheWxpc3RJbmZvID0gYXdhaXQgYXhpb3MuZ2V0KGAvcGxheWxpc3RzLyR7cHJvcHMucGxheWxpc3RJZH1gKVxuICAgICAgICAgICAgc2V0UGxheWxpc3QocGxheWxpc3RJbmZvKVxuICAgICAgICB9XG4gICAgfSxbcHJvcHMucGxheWxpc3RJZF0pXG5cbiAgICByZXR1cm4oXG4gICAgICAgIDxCb3ggaGVpZ2h0PXtcIjEwMCVcIn0gd2lkdGg9e1wiMTAwJVwifSBib3JkZXJTdHlsZT0nc2luZ2xlJyBmbGV4RGlyZWN0aW9uPSdjb2x1bW4nIGFsaWduSXRlbXM9J2NlbnRlcicganVzdGlmeUNvbnRlbnQ9J2NlbnRlcicgcGFkZGluZz17Mn0+XG4gICAgICAgICAgICA8QmlnVGV4dFxuICAgICAgICAgICAgICAgIGhlaWdodD17XCIyMCVcIn1cbiAgICAgICAgICAgICAgdGV4dD0ge3BsYXlsaXN0ID8gcGxheWxpc3QuZGF0YS5uYW1lIDogJ1BsYXlsaXN0IE5hbWUnfVxuICAgICAgICAgICAgICBmb250PSd0aW55J1xuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxUcmFja3MgaWQ9e3BsYXlsaXN0ID8gcHJvcHMucGxheWxpc3RJZCA6ICcnfS8+XG5cbiAgICAgICAgPC9Cb3g+XG4gICAgKVxufVxuXG5jb25zdCBUcmFja3MgPSAocHJvcHMpID0+e1xuICAgIGNvbnN0IFt0cmFja3Msc2V0VHJhY2tzXSA9IHVzZVN0YXRlKFtdKVxuICAgIGNvbnN0IHtpc0ZvY3VzZWR9ID0gdXNlRm9jdXMoKVxuXG4gICAgdXNlRWZmZWN0KGFzeW5jICgpID0+IHtcbiAgICAgICAgaWYocHJvcHMuaWQgIT09ICcnKXtcbiAgICAgICAgICAgIGNvbnN0IHRlbXAgPSBhd2FpdCBheGlvcy5nZXQoYC9wbGF5bGlzdHMvJHtwcm9wcy5pZH0vdHJhY2tzYClcbiAgICAgICAgICAgIHNldFRyYWNrcyh0ZW1wLmRhdGEuaXRlbXMubWFwKChpdGVtLGkpID0+XG4gICAgICAgICAgICAgICAgPEJveCBrZXk9e2l9PlxuICAgICAgICAgICAgICAgICAgICA8VGV4dCBjb2xvcj17aXNGb2N1c2VkID8gJ2dyZWVuJyA6ICd3aGl0ZSd9PntpdGVtLnRyYWNrLm5hbWV9PC9UZXh0PlxuICAgICAgICAgICAgICAgICAgICA8TmV3bGluZSAvPlxuICAgICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgKSlcbiAgICAgICAgfVxuICAgIH0sW3Byb3BzLmlkXSlcblxuXG4gICAgcmV0dXJuKFxuICAgICAgICA8Qm94IGtleT17cHJvcHMuaWR9ZmxleERpcmVjdGlvbj0nY29sdW1uJyBoZWlnaHQ9e1wiODAlXCJ9IHdpZHRoPXtcIjEwMCVcIn0+e3Byb3BzLmlkID8gdHJhY2tzIDogPFRleHQ+bm8gdHJhY2tzPC9UZXh0Pn08L0JveD5cbiAgICApXG59XG5cbm1vZHVsZS5leHBvcnRzID0gTWFpblZpZXc7XG5cbiJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBTyxDQUFDO0FBQzlCLE1BQU07RUFBRUMsUUFBUTtFQUFFQztBQUFVLENBQUMsR0FBR0gsS0FBSztBQUNyQyxNQUFNO0VBQUVJLEdBQUc7RUFBRUMsSUFBSTtFQUFFQyxPQUFPO0VBQUVDO0FBQVMsQ0FBQyxHQUFHTixPQUFPLENBQUMsS0FBSyxDQUFDO0FBQ3ZELE1BQU1PLE9BQU8sR0FBR1AsT0FBTyxDQUFDLGNBQWMsQ0FBQztBQUN2QyxNQUFNUSxRQUFRLEdBQUdSLE9BQU8sQ0FBQyxjQUFjLENBQUM7QUFDeEMsTUFBTVMsS0FBSyxHQUFHVCxPQUFPLENBQUMsT0FBTyxDQUFDOztBQUc5Qjs7QUFFQSxNQUFNVSxRQUFRLEdBQUlDLEtBQUssSUFBSTtFQUV2QixNQUFNLENBQUNDLElBQUksRUFB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