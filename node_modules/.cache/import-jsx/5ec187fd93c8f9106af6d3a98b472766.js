const React = require('react');
const {
  useState,
  useEffect
} = React;
const {
  Box,
  Text,
  Newline
} = require('ink');
const BigText = require('ink-big-text');
const Gradient = require('ink-gradient');
const axios = require('axios');

// Spotify client required parameters

const MainView = props => {
  const [data, setData] = useState('');
  const [playlist, setPlaylist] = useState(null);
  useEffect(async () => {
    const temp = await axios.get('/me');
    setData(temp.data.display_name);
  }, []);
  useEffect(async () => {
    if (props.playlistId !== '') {
      const playlistInfo = await axios.get(`/playlists/${props.playlistId}`);
      setPlaylist(playlistInfo);
    }
  }, [props.playlistId]);
  return /*#__PURE__*/React.createElement(Box, {
    height: "100%",
    width: "100%",
    borderStyle: "single",
    flexDirection: "column",
    alignItems: "center",
    justifyContent: "center",
    padding: 2
  }, /*#__PURE__*/React.createElement(BigText, {
    text: playlist ? playlist.data.name : 'Playlist Name',
    font: "tiny"
  }), /*#__PURE__*/React.createElement(Tracks, {
    id: playlist ? props.playlistId : ''
  }));
};
const Tracks = props => {
  const [tracks, setTracks] = useState([]);
  useEffect(async () => {
    if (props.id !== '') {
      const temp = await axios.get(`/playlists/${props.id}/tracks`);
      setTracks(temp.data.items);
      console.log(temp.data.items);
    }
  }, [props.id]);
  return /*#__PURE__*/React.createElement(Text, null, props.id ? tracks : 'no tracks');
};
module.exports = MainView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsIkJveCIsIlRleHQiLCJOZXdsaW5lIiwiQmlnVGV4dCIsIkdyYWRpZW50IiwiYXhpb3MiLCJNYWluVmlldyIsInByb3BzIiwiZGF0YSIsInNldERhdGEiLCJwbGF5bGlzdCIsInNldFBsYXlsaXN0IiwidGVtcCIsImdldCIsImRpc3BsYXlfbmFtZSIsInBsYXlsaXN0SWQiLCJwbGF5bGlzdEluZm8iLCJuYW1lIiwiVHJhY2tzIiwidHJhY2tzIiwic2V0VHJhY2tzIiwiaWQiLCJpdGVtcyIsImNvbnNvbGUiLCJsb2ciLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiTWFpblZpZXcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3QgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gPSBSZWFjdDtcbmNvbnN0IHsgQm94LCBUZXh0LCBOZXdsaW5lIH0gPSByZXF1aXJlKCdpbmsnKTtcbmNvbnN0IEJpZ1RleHQgPSByZXF1aXJlKCdpbmstYmlnLXRleHQnKTtcbmNvbnN0IEdyYWRpZW50ID0gcmVxdWlyZSgnaW5rLWdyYWRpZW50JylcbmNvbnN0IGF4aW9zID0gcmVxdWlyZSgnYXhpb3MnKVxuXG5cbi8vIFNwb3RpZnkgY2xpZW50IHJlcXVpcmVkIHBhcmFtZXRlcnNcblxuY29uc3QgTWFpblZpZXcgPSAocHJvcHMpID0+e1xuXG4gICAgY29uc3QgW2RhdGEsc2V0RGF0YV0gPSB1c2VTdGF0ZSgnJylcbiAgICBjb25zdCBbcGxheWxpc3Qsc2V0UGxheWxpc3RdID0gdXNlU3RhdGUobnVsbClcblxuICAgIHVzZUVmZmVjdChhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHRlbXAgPSBhd2FpdCBheGlvcy5nZXQoJy9tZScpXG4gICAgICAgIHNldERhdGEodGVtcC5kYXRhLmRpc3BsYXlfbmFtZSlcbiAgICB9LFtdKVxuXG4gICAgdXNlRWZmZWN0KGFzeW5jICgpID0+IHtcbiAgICAgICAgaWYocHJvcHMucGxheWxpc3RJZCAhPT0gJycpe1xuICAgICAgICAgICAgY29uc3QgcGxheWxpc3RJbmZvID0gYXdhaXQgYXhpb3MuZ2V0KGAvcGxheWxpc3RzLyR7cHJvcHMucGxheWxpc3RJZH1gKVxuICAgICAgICAgICAgc2V0UGxheWxpc3QocGxheWxpc3RJbmZvKVxuICAgICAgICB9XG4gICAgfSxbcHJvcHMucGxheWxpc3RJZF0pXG5cbiAgICByZXR1cm4oXG4gICAgICAgIDxCb3ggaGVpZ2h0PXtcIjEwMCVcIn0gd2lkdGg9e1wiMTAwJVwifSBib3JkZXJTdHlsZT0nc2luZ2xlJyBmbGV4RGlyZWN0aW9uPSdjb2x1bW4nIGFsaWduSXRlbXM9J2NlbnRlcicganVzdGlmeUNvbnRlbnQ9J2NlbnRlcicgcGFkZGluZz17Mn0+XG4gICAgICAgICAgICA8QmlnVGV4dFxuICAgICAgICAgICAgICB0ZXh0PSB7cGxheWxpc3QgPyBwbGF5bGlzdC5kYXRhLm5hbWUgOiAnUGxheWxpc3QgTmFtZSd9XG4gICAgICAgICAgICAgIGZvbnQ9J3RpbnknXG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPFRyYWNrcyBpZD17cGxheWxpc3QgPyBwcm9wcy5wbGF5bGlzdElkIDogJyd9Lz5cblxuICAgICAgICA8L0JveD5cbiAgICApXG59XG5cbmNvbnN0IFRyYWNrcyA9IChwcm9wcykgPT57XG5cbiAgICBjb25zdCBbdHJhY2tzLHNldFRyYWNrc10gPSB1c2VTdGF0ZShbXSlcbiAgICB1c2VFZmZlY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgICBcbiAgICAgICAgaWYocHJvcHMuaWQgIT09ICcnKXtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgdGVtcCA9IGF3YWl0IGF4aW9zLmdldChgL3BsYXlsaXN0cy8ke3Byb3BzLmlkfS90cmFja3NgKVxuICAgICAgICAgICAgc2V0VHJhY2tzKHRlbXAuZGF0YS5pdGVtcylcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHRlbXAuZGF0YS5pdGVtcylcbiAgICAgICAgfVxuICAgIH0sW3Byb3BzLmlkXSlcblxuICAgIHJldHVybihcbiAgICAgICAgXG4gICAgICAgIDxUZXh0Pntwcm9wcy5pZCA/IHRyYWNrcyA6ICdubyB0cmFja3MnfTwvVGV4dD5cbiAgICApXG59XG5cbm1vZHVsZS5leHBvcnRzID0gTWFpblZpZXc7XG5cbiJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBTyxDQUFDO0FBQzlCLE1BQU07RUFBRUMsUUFBUTtFQUFFQztBQUFVLENBQUMsR0FBR0gsS0FBSztBQUNyQyxNQUFNO0VBQUVJLEdBQUc7RUFBRUMsSUFBSTtFQUFFQztBQUFRLENBQUMsR0FBR0wsT0FBTyxDQUFDLEtBQUssQ0FBQztBQUM3QyxNQUFNTSxPQUFPLEdBQUdOLE9BQU8sQ0FBQyxjQUFjLENBQUM7QUFDdkMsTUFBTU8sUUFBUSxHQUFHUCxPQUFPLENBQUMsY0FBYyxDQUFDO0FBQ3hDLE1BQU1RLEtBQUssR0FBR1IsT0FBTyxDQUFDLE9BQU8sQ0FBQzs7QUFHOUI7O0FBRUEsTUFBTVMsUUFBUSxHQUFJQyxLQUFLLElBQUk7RUFFdkIsTUFBTSxDQUFDQyxJQUFJLEVBQUNDLE9BQU8sQ0FBQyxHQUFHWCxRQUFRLENBQUMsRUFBRSxDQUFDO0VBQ25DLE1BQU0sQ0FBQ1ksUUFBUSxFQUFDQyxXQUFXLENBQUMsR0FBR2IsUUFBUSxDQUFDLElBQUksQ0FBQztFQUU3Q0MsU0FBUyxDQUFDLFlBQVk7SUFDbEIsTUFBTWEsSUFBSSxHQUFHLE1BQU1QLEtBQUssQ0FBQ1EsR0FBRyxDQUFDLEtBQUssQ0FBQztJQUNuQ0osT0FBTyxDQUFDRyxJQUFJLENBQUNKLElBQUksQ0FBQ00sWUFBWSxDQUFDO0VBQ25DLENBQUMsRUFBQyxFQUFFLENBQUM7RUFFTGYsU0FBUyxDQUFDLFlBQVk7SUFDbEIsSUFBR1EsS0FBSyxDQUFDUSxVQUFVLEtBQUssRUFBRSxFQUFDO01BQ3ZCLE1BQU1DLFlBQVksR0FBRyxNQUFNWCxLQUFLLENBQUNRLEdBQUcsQ0FBRSxjQUFhTixLQUFLLENBQUNRLFVBQVcsRUFBQyxDQUFDO01BQ3RFSixXQUFXLENBQUNLLFlBQVksQ0FBQztJQUM3QjtFQUNKLENBQUMsRUFBQyxDQUFDVCxLQUFLLENBQUNRLFVBQVUsQ0FBQyxDQUFDO0VBRXJCLG9CQUNJLG9CQUFDLEdBQUc7SUFBQyxNQUFNLEVBQUUsTUFBTztJQUFDLEtBQUssRUFBRSxNQUFPO0lBQUMsV0FBVyxFQUFDLFFBQVE7SUFBQyxhQUFhLEVBQUMsUUFBUTtJQUFDLFVBQVUsRUFBQyxRQUFRO0lBQUMsY0FBYyxFQUFDLFFBQVE7SUFBQyxPQUFPLEVBQUU7RUFBRSxnQkFDbkksb0JBQUMsT0FBTztJQUNOLElBQUksRUFBR0wsUUFBUSxHQUFHQSxRQUFRLENBQUNGLElBQUksQ0FBQ1MsSUFBSSxHQUFHLGVBQWdCO0lBQ3ZELElBQUksRUFBQztFQUFNLEVBQ1gsZUFDRixvQkFBQyxNQUFNO0lBQUMsRUFBRSxFQUFFUCxRQUFRLEdBQUdILEtBQUssQ0FBQ1EsVUFBVSxHQUFHO0VBQUcsRUFBRSxDQUU3QztBQUVkLENBQUM7QUFFRCxNQUFNRyxNQUFNLEdBQUlYLEtBQUssSUFBSTtFQUVyQixNQUFNLENBQUNZLE1BQU0sRUFBQ0MsU0FBUyxDQUFDLEdBQUd0QixRQUFRLENBQUMsRUFBRSxDQUFDO0VBQ3ZDQyxTQUFTLENBQUMsWUFBWTtJQUVsQixJQUFHUSxLQUFLLENBQUNjLEVBQUUsS0FBSyxFQUFFLEVBQUM7TUFFZixNQUFNVCxJQUFJLEdBQUcsTUFBTVAsS0FBSyxDQUFDUSxHQUFHLENBQUUsY0FBYU4sS0FBSyxDQUFDYyxFQUFHLFNBQVEsQ0FBQztNQUM3REQsU0FBUyxDQUFDUixJQUFJLENBQUNKLElBQUksQ0FBQ2MsS0FBSyxDQUFDO01BQzFCQyxPQUFPLENBQUNDLEdBQUcsQ0FBQ1osSUFBSSxDQUFDSixJQUFJLENBQUNjLEtBQUssQ0FBQztJQUNoQztFQUNKLENBQUMsRUFBQyxDQUFDZixLQUFLLENBQUNjLEVBQUUsQ0FBQyxDQUFDO0VBRWIsb0JBRUksb0JBQUMsSUFBSSxRQUFFZCxLQUFLLENBQUNjLEVBQUUsR0FBR0YsTUFBTSxHQUFHLFdBQVcsQ0FBUTtBQUV0RCxDQUFDO0FBRURNLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHcEIsUUFBUSJ9