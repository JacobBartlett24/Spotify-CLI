const React = require('react');
const {
  useState,
  useEffect
} = React;
const {
  Box,
  Text,
  Newline,
  useFocus
} = require('ink');
const BigText = require('ink-big-text');
const axios = require('axios');
const {
  useRef
} = require('react');
const PlaylistPage = props => {
  const [playlistData, setPlaylistData] = useState([]);
  useEffect(async () => {
    const playlists = await axios.get('/me/playlists');
    setPlaylistData(playlists.data.items.map((playlist, i) => /*#__PURE__*/React.createElement(Playlist, {
      key: playlist.id,
      playlistId: playlist.id,
      playlistName: playlist.name,
      populate: props.populate
    })));
  }, []);
  useEffect(() => {
    playlistData.forEach(element => {
      console.log(element);
    });
  }, [playlistData]);
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: "column"
  }, /*#__PURE__*/React.createElement(Text, null, "Playlist Page"), /*#__PURE__*/React.createElement(Newline, null), playlistData);
};
const Playlist = props => {
  const {
    isFocused
  } = useFocus();
  return /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, {
    color: isFocused ? 'green' : 'white',
    bold: true
  }, isFocused ? props.populate(props.playlistId) : '', props.playlistName), /*#__PURE__*/React.createElement(Newline, null));
};
module.exports = PlaylistPage;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsIkJveCIsIlRleHQiLCJOZXdsaW5lIiwidXNlRm9jdXMiLCJCaWdUZXh0IiwiYXhpb3MiLCJ1c2VSZWYiLCJQbGF5bGlzdFBhZ2UiLCJwcm9wcyIsInBsYXlsaXN0RGF0YSIsInNldFBsYXlsaXN0RGF0YSIsInBsYXlsaXN0cyIsImdldCIsImRhdGEiLCJpdGVtcyIsIm1hcCIsInBsYXlsaXN0IiwiaSIsImlkIiwibmFtZSIsInBvcHVsYXRlIiwiZm9yRWFjaCIsImVsZW1lbnQiLCJjb25zb2xlIiwibG9nIiwiUGxheWxpc3QiLCJpc0ZvY3VzZWQiLCJwbGF5bGlzdElkIiwicGxheWxpc3ROYW1lIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIlBsYXlsaXN0UGFnZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSA9IFJlYWN0O1xuY29uc3QgeyBCb3gsIFRleHQsIE5ld2xpbmUsIHVzZUZvY3VzIH0gPSByZXF1aXJlKCdpbmsnKTtcbmNvbnN0IEJpZ1RleHQgPSByZXF1aXJlKCdpbmstYmlnLXRleHQnKTtcbmNvbnN0IGF4aW9zID0gcmVxdWlyZSgnYXhpb3MnKTtcbmNvbnN0IHsgdXNlUmVmIH0gPSByZXF1aXJlKCdyZWFjdCcpO1xuXG5jb25zdCBQbGF5bGlzdFBhZ2UgPSAocHJvcHMpID0+e1xuXG4gICAgY29uc3QgW3BsYXlsaXN0RGF0YSxzZXRQbGF5bGlzdERhdGFdID0gdXNlU3RhdGUoW10pO1xuICAgIFxuXG4gICAgdXNlRWZmZWN0KGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgcGxheWxpc3RzID0gYXdhaXQgYXhpb3MuZ2V0KCcvbWUvcGxheWxpc3RzJylcblxuICAgICAgICBzZXRQbGF5bGlzdERhdGEocGxheWxpc3RzLmRhdGEuaXRlbXMubWFwKChwbGF5bGlzdCwgaSkgPT5cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgPFBsYXlsaXN0IGtleT17cGxheWxpc3QuaWR9IHBsYXlsaXN0SWQ9e3BsYXlsaXN0LmlkfSBwbGF5bGlzdE5hbWU9e3BsYXlsaXN0Lm5hbWV9IHBvcHVsYXRlPXtwcm9wcy5wb3B1bGF0ZX0vPlxuICAgICAgICApKTtcbiAgICB9LFtdKVxuICAgIFxuICAgIHVzZUVmZmVjdCgoKSA9PntcbiAgICAgICAgcGxheWxpc3REYXRhLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlbGVtZW50KVxuICAgICAgICB9KTtcbiAgICB9LCBbcGxheWxpc3REYXRhXSlcblxuXG5cbiAgICByZXR1cm4oXG4gICAgICAgIDxCb3ggZmxleERpcmVjdGlvbj0nY29sdW1uJz5cbiAgICAgICAgICAgIDxUZXh0PlBsYXlsaXN0IFBhZ2U8L1RleHQ+XG4gICAgICAgICAgICA8TmV3bGluZSAvPlxuICAgICAgICAgICAge3BsYXlsaXN0RGF0YX1cbiAgICAgICAgPC9Cb3g+XG4gICAgKVxufVxuXG5jb25zdCBQbGF5bGlzdCA9IChwcm9wcykgPT57XG4gICAgY29uc3Qge2lzRm9jdXNlZH0gPSB1c2VGb2N1cygpO1xuXG4gICAgcmV0dXJuKFxuICAgICAgICA8Qm94PlxuICAgICAgICAgICAgPFRleHQgY29sb3I9e2lzRm9jdXNlZCA/ICdncmVlbicgOiAnd2hpdGUnfSBib2xkPntpc0ZvY3VzZWQgPyBwcm9wcy5wb3B1bGF0ZShwcm9wcy5wbGF5bGlzdElkKSA6ICcnfXtwcm9wcy5wbGF5bGlzdE5hbWV9PC9UZXh0PlxuICAgICAgICAgICAgPE5ld2xpbmUgLz5cbiAgICAgICAgPC9Cb3g+XG4gICAgKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFBsYXlsaXN0UGFnZTtcblxuIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFPLENBQUM7QUFDOUIsTUFBTTtFQUFFQyxRQUFRO0VBQUVDO0FBQVUsQ0FBQyxHQUFHSCxLQUFLO0FBQ3JDLE1BQU07RUFBRUksR0FBRztFQUFFQyxJQUFJO0VBQUVDLE9BQU87RUFBRUM7QUFBUyxDQUFDLEdBQUdOLE9BQU8sQ0FBQyxLQUFLLENBQUM7QUFDdkQsTUFBTU8sT0FBTyxHQUFHUCxPQUFPLENBQUMsY0FBYyxDQUFDO0FBQ3ZDLE1BQU1RLEtBQUssR0FBR1IsT0FBTyxDQUFDLE9BQU8sQ0FBQztBQUM5QixNQUFNO0VBQUVTO0FBQU8sQ0FBQyxHQUFHVCxPQUFPLENBQUMsT0FBTyxDQUFDO0FBRW5DLE1BQU1VLFlBQVksR0FBSUMsS0FBSyxJQUFJO0VBRTNCLE1BQU0sQ0FBQ0MsWUFBWSxFQUFDQyxlQUFlLENBQUMsR0FBR1osUUFBUSxDQUFDLEVBQUUsQ0FBQztFQUduREMsU0FBUyxDQUFDLFlBQVk7SUFDbEIsTUFBTVksU0FBUyxHQUFHLE1BQU1OLEtBQUssQ0FBQ08sR0FBRyxDQUFDLGVBQWUsQ0FBQztJQUVsREYsZUFBZSxDQUFDQyxTQUFTLENBQUNFLElBQUksQ0FBQ0MsS0FBSyxDQUFDQyxHQUFHLENBQUMsQ0FBQ0MsUUFBUSxFQUFFQyxDQUFDLGtCQUVqRCxvQkFBQyxRQUFRO01BQUMsR0FBRyxFQUFFRCxRQUFRLENBQUNFLEVBQUc7TUFBQyxVQUFVLEVBQUVGLFFBQVEsQ0FBQ0UsRUFBRztNQUFDLFlBQVksRUFBRUYsUUFBUSxDQUFDRyxJQUFLO01BQUMsUUFBUSxFQUFFWCxLQUFLLENBQUNZO0lBQVMsRUFBRSxDQUNoSCxDQUFDO0VBQ04sQ0FBQyxFQUFDLEVBQUUsQ0FBQztFQUVMckIsU0FBUyxDQUFDLE1BQUs7SUFDWFUsWUFBWSxDQUFDWSxPQUFPLENBQUNDLE9BQU8sSUFBSTtNQUM1QkMsT0FBTyxDQUFDQyxHQUFHLENBQUNGLE9BQU8sQ0FBQztJQUN4QixDQUFDLENBQUM7RUFDTixDQUFDLEVBQUUsQ0FBQ2IsWUFBWSxDQUFDLENBQUM7RUFJbEIsb0JBQ0ksb0JBQUMsR0FBRztJQUFDLGFBQWEsRUFBQztFQUFRLGdCQUN2QixvQkFBQyxJQUFJLHdCQUFxQixlQUMxQixvQkFBQyxPQUFPLE9BQUcsRUFDVkEsWUFBWSxDQUNYO0FBRWQsQ0FBQztBQUVELE1BQU1nQixRQUFRLEdBQUlqQixLQUFLLElBQUk7RUFDdkIsTUFBTTtJQUFDa0I7RUFBUyxDQUFDLEdBQUd2QixRQUFRLEVBQUU7RUFFOUIsb0JBQ0ksb0JBQUMsR0FBRyxxQkFDQSxvQkFBQyxJQUFJO0lBQUMsS0FBSyxFQUFFdUIsU0FBUyxHQUFHLE9BQU8sR0FBRyxPQUFRO0lBQUMsSUFBSTtFQUFBLEdBQUVBLFNBQVMsR0FBR2xCLEtBQUssQ0FBQ1ksUUFBUSxDQUFDWixLQUFLLENBQUNtQixVQUFVLENBQUMsR0FBRyxFQUFFLEVBQUVuQixLQUFLLENBQUNvQixZQUFZLENBQVEsZUFDL0gsb0JBQUMsT0FBTyxPQUFHLENBQ1Q7QUFFZCxDQUFDO0FBRURDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHdkIsWUFBWSJ9