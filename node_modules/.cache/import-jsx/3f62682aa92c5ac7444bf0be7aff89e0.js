const React = require('react');
const {
  useState,
  useEffect
} = React;
const {
  Box,
  Text,
  Newline
} = require('ink');
const BigText = require('ink-big-text');
const Gradient = require('ink-gradient');
const axios = require('axios');

// Spotify client required parameters

const MainView = props => {
  const [data, setData] = useState('');
  const [playlist, setPlaylist] = useState(null);
  useEffect(async () => {
    const temp = await axios.get('/me');
    setData(temp.data.display_name);
  }, []);
  useEffect(async () => {
    if (props.playlistId !== '') {
      const playlistInfo = await axios.get(`/playlists/${props.playlistId}`);
      setPlaylist(playlistInfo);
    }
  }, [props.playlistId]);
  return /*#__PURE__*/React.createElement(Box, {
    height: "100%",
    width: "100%",
    borderStyle: "single",
    flexDirection: "column",
    alignItems: "center",
    justifyContent: "center",
    padding: 2
  }, /*#__PURE__*/React.createElement(BigText, {
    text: playlist ? playlist.data.name : 'Playlist Name',
    font: "tiny"
  }), /*#__PURE__*/React.createElement(Tracks, {
    id: playlist ? props.playlistId : ''
  }));
};
const Tracks = props => {
  const [tracks, setTracks] = useState([]);
  useEffect(async () => {
    if (props.id !== '') {
      const temp = await axios.get(`/playlists/${props.id}/tracks`);
      setTracks(temp.data.items.map((item, i) => {
        /*#__PURE__*/React.createElement(Text, {
          key: i
        }, item.track);
      }));
      console.log(tracks);
    }
  }, [props.id]);
  return /*#__PURE__*/React.createElement(Box, {
    height: "30%",
    width: "100%",
    borderStyle: "single"
  }, props.id ? tracks : /*#__PURE__*/React.createElement(Text, null, "no tracks"));
};
module.exports = MainView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsIkJveCIsIlRleHQiLCJOZXdsaW5lIiwiQmlnVGV4dCIsIkdyYWRpZW50IiwiYXhpb3MiLCJNYWluVmlldyIsInByb3BzIiwiZGF0YSIsInNldERhdGEiLCJwbGF5bGlzdCIsInNldFBsYXlsaXN0IiwidGVtcCIsImdldCIsImRpc3BsYXlfbmFtZSIsInBsYXlsaXN0SWQiLCJwbGF5bGlzdEluZm8iLCJuYW1lIiwiVHJhY2tzIiwidHJhY2tzIiwic2V0VHJhY2tzIiwiaWQiLCJpdGVtcyIsIm1hcCIsIml0ZW0iLCJpIiwidHJhY2siLCJjb25zb2xlIiwibG9nIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIk1haW5WaWV3LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9ID0gUmVhY3Q7XG5jb25zdCB7IEJveCwgVGV4dCwgTmV3bGluZSB9ID0gcmVxdWlyZSgnaW5rJyk7XG5jb25zdCBCaWdUZXh0ID0gcmVxdWlyZSgnaW5rLWJpZy10ZXh0Jyk7XG5jb25zdCBHcmFkaWVudCA9IHJlcXVpcmUoJ2luay1ncmFkaWVudCcpXG5jb25zdCBheGlvcyA9IHJlcXVpcmUoJ2F4aW9zJylcblxuXG4vLyBTcG90aWZ5IGNsaWVudCByZXF1aXJlZCBwYXJhbWV0ZXJzXG5cbmNvbnN0IE1haW5WaWV3ID0gKHByb3BzKSA9PntcblxuICAgIGNvbnN0IFtkYXRhLHNldERhdGFdID0gdXNlU3RhdGUoJycpXG4gICAgY29uc3QgW3BsYXlsaXN0LHNldFBsYXlsaXN0XSA9IHVzZVN0YXRlKG51bGwpXG5cbiAgICB1c2VFZmZlY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCB0ZW1wID0gYXdhaXQgYXhpb3MuZ2V0KCcvbWUnKVxuICAgICAgICBzZXREYXRhKHRlbXAuZGF0YS5kaXNwbGF5X25hbWUpXG4gICAgfSxbXSlcblxuICAgIHVzZUVmZmVjdChhc3luYyAoKSA9PiB7XG4gICAgICAgIGlmKHByb3BzLnBsYXlsaXN0SWQgIT09ICcnKXtcbiAgICAgICAgICAgIGNvbnN0IHBsYXlsaXN0SW5mbyA9IGF3YWl0IGF4aW9zLmdldChgL3BsYXlsaXN0cy8ke3Byb3BzLnBsYXlsaXN0SWR9YClcbiAgICAgICAgICAgIHNldFBsYXlsaXN0KHBsYXlsaXN0SW5mbylcbiAgICAgICAgfVxuICAgIH0sW3Byb3BzLnBsYXlsaXN0SWRdKVxuXG4gICAgcmV0dXJuKFxuICAgICAgICA8Qm94IGhlaWdodD17XCIxMDAlXCJ9IHdpZHRoPXtcIjEwMCVcIn0gYm9yZGVyU3R5bGU9J3NpbmdsZScgZmxleERpcmVjdGlvbj0nY29sdW1uJyBhbGlnbkl0ZW1zPSdjZW50ZXInIGp1c3RpZnlDb250ZW50PSdjZW50ZXInIHBhZGRpbmc9ezJ9PlxuICAgICAgICAgICAgPEJpZ1RleHRcbiAgICAgICAgICAgICAgdGV4dD0ge3BsYXlsaXN0ID8gcGxheWxpc3QuZGF0YS5uYW1lIDogJ1BsYXlsaXN0IE5hbWUnfVxuICAgICAgICAgICAgICBmb250PSd0aW55J1xuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxUcmFja3MgaWQ9e3BsYXlsaXN0ID8gcHJvcHMucGxheWxpc3RJZCA6ICcnfS8+XG5cbiAgICAgICAgPC9Cb3g+XG4gICAgKVxufVxuXG5jb25zdCBUcmFja3MgPSAocHJvcHMpID0+e1xuICAgIGNvbnN0IFt0cmFja3Msc2V0VHJhY2tzXSA9IHVzZVN0YXRlKFtdKVxuICAgIFxuICAgIHVzZUVmZmVjdChhc3luYyAoKSA9PiB7XG4gICAgICAgIFxuICAgICAgICBpZihwcm9wcy5pZCAhPT0gJycpe1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCB0ZW1wID0gYXdhaXQgYXhpb3MuZ2V0KGAvcGxheWxpc3RzLyR7cHJvcHMuaWR9L3RyYWNrc2ApXG4gICAgICAgICAgICBzZXRUcmFja3ModGVtcC5kYXRhLml0ZW1zLm1hcCgoaXRlbSxpKSA9PntcbiAgICAgICAgICAgICAgICA8VGV4dCBrZXk9e2l9PntpdGVtLnRyYWNrfTwvVGV4dD5cbiAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgY29uc29sZS5sb2codHJhY2tzKVxuICAgICAgICB9XG4gICAgfSxbcHJvcHMuaWRdKVxuXG4gICAgcmV0dXJuKFxuICAgICAgICA8Qm94IGhlaWdodD17XCIzMCVcIn0gd2lkdGg9e1wiMTAwJVwifSBib3JkZXJTdHlsZT0nc2luZ2xlJz57cHJvcHMuaWQgPyB0cmFja3MgOiA8VGV4dD5ubyB0cmFja3M8L1RleHQ+fTwvQm94PlxuICAgIClcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBNYWluVmlldztcblxuIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFPLENBQUM7QUFDOUIsTUFBTTtFQUFFQyxRQUFRO0VBQUVDO0FBQVUsQ0FBQyxHQUFHSCxLQUFLO0FBQ3JDLE1BQU07RUFBRUksR0FBRztFQUFFQyxJQUFJO0VBQUVDO0FBQVEsQ0FBQyxHQUFHTCxPQUFPLENBQUMsS0FBSyxDQUFDO0FBQzdDLE1BQU1NLE9BQU8sR0FBR04sT0FBTyxDQUFDLGNBQWMsQ0FBQztBQUN2QyxNQUFNTyxRQUFRLEdBQUdQLE9BQU8sQ0FBQyxjQUFjLENBQUM7QUFDeEMsTUFBTVEsS0FBSyxHQUFHUixPQUFPLENBQUMsT0FBTyxDQUFDOztBQUc5Qjs7QUFFQSxNQUFNUyxRQUFRLEdBQUlDLEtBQUssSUFBSTtFQUV2QixNQUFNLENBQUNDLElBQUksRUFBQ0MsT0FBTyxDQUFDLEdBQUdYLFFBQVEsQ0FBQyxFQUFFLENBQUM7RUFDbkMsTUFBTSxDQUFDWSxRQUFRLEVBQUNDLFdBQVcsQ0FBQyxHQUFHYixRQUFRLENBQUMsSUFBSSxDQUFDO0VBRTdDQyxTQUFTLENBQUMsWUFBWTtJQUNsQixNQUFNYSxJQUFJLEdBQUcsTUFBTVAsS0FBSyxDQUFDUSxHQUFHLENBQUMsS0FBSyxDQUFDO0lBQ25DSixPQUFPLENBQUNHLElBQUksQ0FBQ0osSUFBSSxDQUFDTSxZQUFZLENBQUM7RUFDbkMsQ0FBQyxFQUFDLEVBQUUsQ0FBQztFQUVMZixTQUFTLENBQUMsWUFBWTtJQUNsQixJQUFHUSxLQUFLLENBQUNRLFVBQVUsS0FBSyxFQUFFLEVBQUM7TUFDdkIsTUFBTUMsWUFBWSxHQUFHLE1BQU1YLEtBQUssQ0FBQ1EsR0FBRyxDQUFFLGNBQWFOLEtBQUssQ0FBQ1EsVUFBVyxFQUFDLENBQUM7TUFDdEVKLFdBQVcsQ0FBQ0ssWUFBWSxDQUFDO0lBQzdCO0VBQ0osQ0FBQyxFQUFDLENBQUNULEtBQUssQ0FBQ1EsVUFBVSxDQUFDLENBQUM7RUFFckIsb0JBQ0ksb0JBQUMsR0FBRztJQUFDLE1BQU0sRUFBRSxNQUFPO0lBQUMsS0FBSyxFQUFFLE1BQU87SUFBQyxXQUFXLEVBQUMsUUFBUTtJQUFDLGFBQWEsRUFBQyxRQUFRO0lBQUMsVUFBVSxFQUFDLFFBQVE7SUFBQyxjQUFjLEVBQUMsUUFBUTtJQUFDLE9BQU8sRUFBRTtFQUFFLGdCQUNuSSxvQkFBQyxPQUFPO0lBQ04sSUFBSSxFQUFHTCxRQUFRLEdBQUdBLFFBQVEsQ0FBQ0YsSUFBSSxDQUFDUyxJQUFJLEdBQUcsZUFBZ0I7SUFDdkQsSUFBSSxFQUFDO0VBQU0sRUFDWCxlQUNGLG9CQUFDLE1BQU07SUFBQyxFQUFFLEVBQUVQLFFBQVEsR0FBR0gsS0FBSyxDQUFDUSxVQUFVLEdBQUc7RUFBRyxFQUFFLENBRTdDO0FBRWQsQ0FBQztBQUVELE1BQU1HLE1BQU0sR0FBSVgsS0FBSyxJQUFJO0VBQ3JCLE1BQU0sQ0FBQ1ksTUFBTSxFQUFDQyxTQUFTLENBQUMsR0FBR3RCLFFBQVEsQ0FBQyxFQUFFLENBQUM7RUFFdkNDLFNBQVMsQ0FBQyxZQUFZO0lBRWxCLElBQUdRLEtBQUssQ0FBQ2MsRUFBRSxLQUFLLEVBQUUsRUFBQztNQUVmLE1BQU1ULElBQUksR0FBRyxNQUFNUCxLQUFLLENBQUNRLEdBQUcsQ0FBRSxjQUFhTixLQUFLLENBQUNjLEVBQUcsU0FBUSxDQUFDO01BQzdERCxTQUFTLENBQUNSLElBQUksQ0FBQ0osSUFBSSxDQUFDYyxLQUFLLENBQUNDLEdBQUcsQ0FBQyxDQUFDQyxJQUFJLEVBQUNDLENBQUMsS0FBSTtRQUNyQyxpQ0FBQyxJQUFJO1VBQUMsR0FBRyxFQUFFQTtRQUFFLEdBQUVELElBQUksQ0FBQ0UsS0FBSyxDQUFRO01BQ3JDLENBQUMsQ0FBQyxDQUFDO01BQ0hDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDVCxNQUFNLENBQUM7SUFDdkI7RUFDSixDQUFDLEVBQUMsQ0FBQ1osS0FBSyxDQUFDYyxFQUFFLENBQUMsQ0FBQztFQUViLG9CQUNJLG9CQUFDLEdBQUc7SUFBQyxNQUFNLEVBQUUsS0FBTTtJQUFDLEtBQUssRUFBRSxNQUFPO0lBQUMsV0FBVyxFQUFDO0VBQVEsR0FBRWQsS0FBSyxDQUFDYyxFQUFFLEdBQUdGLE1BQU0sZ0JBQUcsb0JBQUMsSUFBSSxvQkFBaUIsQ0FBTztBQUVsSCxDQUFDO0FBRURVLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHeEIsUUFBUSJ9