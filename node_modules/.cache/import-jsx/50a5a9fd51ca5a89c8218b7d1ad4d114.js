const React = require('react');
const {
  useState,
  useEffect
} = React;
const {
  Box,
  Text,
  Newline
} = require('ink');
const BigText = require('ink-big-text');
const Gradient = require('ink-gradient');
const axios = require('axios');

// Spotify client required parameters

const MainView = props => {
  const [data, setData] = useState('');
  const [playlist, setPlaylist] = useState(null);
  useEffect(async () => {
    const temp = await axios.get('/me');
    setData(temp.data.display_name);
  }, []);
  useEffect(async () => {
    if (props.playlistId !== '') {
      const playlistInfo = await axios.get(`/playlists/${props.playlistId}`);
      setPlaylist(playlistInfo);
    }
  }, [props.playlistId]);
  return /*#__PURE__*/React.createElement(Box, {
    height: "100%",
    width: "100%",
    borderStyle: "single",
    flexDirection: "column",
    alignItems: "center",
    justifyContent: "center",
    padding: 2
  }, /*#__PURE__*/React.createElement(BigText, {
    text: playlist ? playlist.data.name : 'Playlist Name',
    font: "tiny"
  }), /*#__PURE__*/React.createElement(Tracks, {
    id: playlist ? props.playlistId : ''
  }));
};
const Tracks = props => {
  const [tracks, setTracks] = useState([]);
  useEffect(async () => {
    if (props.id !== '') {
      const temp = await axios.get(`/playlists/${props.id}/tracks`);
      setTracks(temp.data.items.map((item, i) => {
        /*#__PURE__*/React.createElement(Text, {
          key: i
        }, item);
      }));
      console.log(tracks);
    }
  }, [props.id]);
  return /*#__PURE__*/React.createElement(Box, {
    height: "30%",
    width: "100%",
    borderStyle: "single"
  }, props.id ? tracks : /*#__PURE__*/React.createElement(Text, null, "no tracks"));
};
module.exports = MainView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsIkJveCIsIlRleHQiLCJOZXdsaW5lIiwiQmlnVGV4dCIsIkdyYWRpZW50IiwiYXhpb3MiLCJNYWluVmlldyIsInByb3BzIiwiZGF0YSIsInNldERhdGEiLCJwbGF5bGlzdCIsInNldFBsYXlsaXN0IiwidGVtcCIsImdldCIsImRpc3BsYXlfbmFtZSIsInBsYXlsaXN0SWQiLCJwbGF5bGlzdEluZm8iLCJuYW1lIiwiVHJhY2tzIiwidHJhY2tzIiwic2V0VHJhY2tzIiwiaWQiLCJpdGVtcyIsIm1hcCIsIml0ZW0iLCJpIiwiY29uc29sZSIsImxvZyIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJNYWluVmlldy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSA9IFJlYWN0O1xuY29uc3QgeyBCb3gsIFRleHQsIE5ld2xpbmUgfSA9IHJlcXVpcmUoJ2luaycpO1xuY29uc3QgQmlnVGV4dCA9IHJlcXVpcmUoJ2luay1iaWctdGV4dCcpO1xuY29uc3QgR3JhZGllbnQgPSByZXF1aXJlKCdpbmstZ3JhZGllbnQnKVxuY29uc3QgYXhpb3MgPSByZXF1aXJlKCdheGlvcycpXG5cblxuLy8gU3BvdGlmeSBjbGllbnQgcmVxdWlyZWQgcGFyYW1ldGVyc1xuXG5jb25zdCBNYWluVmlldyA9IChwcm9wcykgPT57XG5cbiAgICBjb25zdCBbZGF0YSxzZXREYXRhXSA9IHVzZVN0YXRlKCcnKVxuICAgIGNvbnN0IFtwbGF5bGlzdCxzZXRQbGF5bGlzdF0gPSB1c2VTdGF0ZShudWxsKVxuXG4gICAgdXNlRWZmZWN0KGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgdGVtcCA9IGF3YWl0IGF4aW9zLmdldCgnL21lJylcbiAgICAgICAgc2V0RGF0YSh0ZW1wLmRhdGEuZGlzcGxheV9uYW1lKVxuICAgIH0sW10pXG5cbiAgICB1c2VFZmZlY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgICBpZihwcm9wcy5wbGF5bGlzdElkICE9PSAnJyl7XG4gICAgICAgICAgICBjb25zdCBwbGF5bGlzdEluZm8gPSBhd2FpdCBheGlvcy5nZXQoYC9wbGF5bGlzdHMvJHtwcm9wcy5wbGF5bGlzdElkfWApXG4gICAgICAgICAgICBzZXRQbGF5bGlzdChwbGF5bGlzdEluZm8pXG4gICAgICAgIH1cbiAgICB9LFtwcm9wcy5wbGF5bGlzdElkXSlcblxuICAgIHJldHVybihcbiAgICAgICAgPEJveCBoZWlnaHQ9e1wiMTAwJVwifSB3aWR0aD17XCIxMDAlXCJ9IGJvcmRlclN0eWxlPSdzaW5nbGUnIGZsZXhEaXJlY3Rpb249J2NvbHVtbicgYWxpZ25JdGVtcz0nY2VudGVyJyBqdXN0aWZ5Q29udGVudD0nY2VudGVyJyBwYWRkaW5nPXsyfT5cbiAgICAgICAgICAgIDxCaWdUZXh0XG4gICAgICAgICAgICAgIHRleHQ9IHtwbGF5bGlzdCA/IHBsYXlsaXN0LmRhdGEubmFtZSA6ICdQbGF5bGlzdCBOYW1lJ31cbiAgICAgICAgICAgICAgZm9udD0ndGlueSdcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8VHJhY2tzIGlkPXtwbGF5bGlzdCA/IHByb3BzLnBsYXlsaXN0SWQgOiAnJ30vPlxuXG4gICAgICAgIDwvQm94PlxuICAgIClcbn1cblxuY29uc3QgVHJhY2tzID0gKHByb3BzKSA9PntcbiAgICBjb25zdCBbdHJhY2tzLHNldFRyYWNrc10gPSB1c2VTdGF0ZShbXSlcbiAgICBcbiAgICB1c2VFZmZlY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgICBcbiAgICAgICAgaWYocHJvcHMuaWQgIT09ICcnKXtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgdGVtcCA9IGF3YWl0IGF4aW9zLmdldChgL3BsYXlsaXN0cy8ke3Byb3BzLmlkfS90cmFja3NgKVxuICAgICAgICAgICAgc2V0VHJhY2tzKHRlbXAuZGF0YS5pdGVtcy5tYXAoKGl0ZW0saSkgPT57XG4gICAgICAgICAgICAgICAgPFRleHQga2V5PXtpfT57aXRlbX08L1RleHQ+XG4gICAgICAgICAgICB9KSlcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHRyYWNrcylcbiAgICAgICAgfVxuICAgIH0sW3Byb3BzLmlkXSlcblxuICAgIHJldHVybihcbiAgICAgICAgPEJveCBoZWlnaHQ9e1wiMzAlXCJ9IHdpZHRoPXtcIjEwMCVcIn0gYm9yZGVyU3R5bGU9J3NpbmdsZSc+e3Byb3BzLmlkID8gdHJhY2tzIDogPFRleHQ+bm8gdHJhY2tzPC9UZXh0Pn08L0JveD5cbiAgICApXG59XG5cbm1vZHVsZS5leHBvcnRzID0gTWFpblZpZXc7XG5cbiJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBTyxDQUFDO0FBQzlCLE1BQU07RUFBRUMsUUFBUTtFQUFFQztBQUFVLENBQUMsR0FBR0gsS0FBSztBQUNyQyxNQUFNO0VBQUVJLEdBQUc7RUFBRUMsSUFBSTtFQUFFQztBQUFRLENBQUMsR0FBR0wsT0FBTyxDQUFDLEtBQUssQ0FBQztBQUM3QyxNQUFNTSxPQUFPLEdBQUdOLE9BQU8sQ0FBQyxjQUFjLENBQUM7QUFDdkMsTUFBTU8sUUFBUSxHQUFHUCxPQUFPLENBQUMsY0FBYyxDQUFDO0FBQ3hDLE1BQU1RLEtBQUssR0FBR1IsT0FBTyxDQUFDLE9BQU8sQ0FBQzs7QUFHOUI7O0FBRUEsTUFBTVMsUUFBUSxHQUFJQyxLQUFLLElBQUk7RUFFdkIsTUFBTSxDQUFDQyxJQUFJLEVBQUNDLE9BQU8sQ0FBQyxHQUFHWCxRQUFRLENBQUMsRUFBRSxDQUFDO0VBQ25DLE1BQU0sQ0FBQ1ksUUFBUSxFQUFDQyxXQUFXLENBQUMsR0FBR2IsUUFBUSxDQUFDLElBQUksQ0FBQztFQUU3Q0MsU0FBUyxDQUFDLFlBQVk7SUFDbEIsTUFBTWEsSUFBSSxHQUFHLE1BQU1QLEtBQUssQ0FBQ1EsR0FBRyxDQUFDLEtBQUssQ0FBQztJQUNuQ0osT0FBTyxDQUFDRyxJQUFJLENBQUNKLElBQUksQ0FBQ00sWUFBWSxDQUFDO0VBQ25DLENBQUMsRUFBQyxFQUFFLENBQUM7RUFFTGYsU0FBUyxDQUFDLFlBQVk7SUFDbEIsSUFBR1EsS0FBSyxDQUFDUSxVQUFVLEtBQUssRUFBRSxFQUFDO01BQ3ZCLE1BQU1DLFlBQVksR0FBRyxNQUFNWCxLQUFLLENBQUNRLEdBQUcsQ0FBRSxjQUFhTixLQUFLLENBQUNRLFVBQVcsRUFBQyxDQUFDO01BQ3RFSixXQUFXLENBQUNLLFlBQVksQ0FBQztJQUM3QjtFQUNKLENBQUMsRUFBQyxDQUFDVCxLQUFLLENBQUNRLFVBQVUsQ0FBQyxDQUFDO0VBRXJCLG9CQUNJLG9CQUFDLEdBQUc7SUFBQyxNQUFNLEVBQUUsTUFBTztJQUFDLEtBQUssRUFBRSxNQUFPO0lBQUMsV0FBVyxFQUFDLFFBQVE7SUFBQyxhQUFhLEVBQUMsUUFBUTtJQUFDLFVBQVUsRUFBQyxRQUFRO0lBQUMsY0FBYyxFQUFDLFFBQVE7SUFBQyxPQUFPLEVBQUU7RUFBRSxnQkFDbkksb0JBQUMsT0FBTztJQUNOLElBQUksRUFBR0wsUUFBUSxHQUFHQSxRQUFRLENBQUNGLElBQUksQ0FBQ1MsSUFBSSxHQUFHLGVBQWdCO0lBQ3ZELElBQUksRUFBQztFQUFNLEVBQ1gsZUFDRixvQkFBQyxNQUFNO0lBQUMsRUFBRSxFQUFFUCxRQUFRLEdBQUdILEtBQUssQ0FBQ1EsVUFBVSxHQUFHO0VBQUcsRUFBRSxDQUU3QztBQUVkLENBQUM7QUFFRCxNQUFNRyxNQUFNLEdBQUlYLEtBQUssSUFBSTtFQUNyQixNQUFNLENBQUNZLE1BQU0sRUFBQ0MsU0FBUyxDQUFDLEdBQUd0QixRQUFRLENBQUMsRUFBRSxDQUFDO0VBRXZDQyxTQUFTLENBQUMsWUFBWTtJQUVsQixJQUFHUSxLQUFLLENBQUNjLEVBQUUsS0FBSyxFQUFFLEVBQUM7TUFFZixNQUFNVCxJQUFJLEdBQUcsTUFBTVAsS0FBSyxDQUFDUSxHQUFHLENBQUUsY0FBYU4sS0FBSyxDQUFDYyxFQUFHLFNBQVEsQ0FBQztNQUM3REQsU0FBUyxDQUFDUixJQUFJLENBQUNKLElBQUksQ0FBQ2MsS0FBSyxDQUFDQyxHQUFHLENBQUMsQ0FBQ0MsSUFBSSxFQUFDQyxDQUFDLEtBQUk7UUFDckMsaUNBQUMsSUFBSTtVQUFDLEdBQUcsRUFBRUE7UUFBRSxHQUFFRCxJQUFJLENBQVE7TUFDL0IsQ0FBQyxDQUFDLENBQUM7TUFDSEUsT0FBTyxDQUFDQyxHQUFHLENBQUNSLE1BQU0sQ0FBQztJQUN2QjtFQUNKLENBQUMsRUFBQyxDQUFDWixLQUFLLENBQUNjLEVBQUUsQ0FBQyxDQUFDO0VBRWIsb0JBQ0ksb0JBQUMsR0FBRztJQUFDLE1BQU0sRUFBRSxLQUFNO0lBQUMsS0FBSyxFQUFFLE1BQU87SUFBQyxXQUFXLEVBQUM7RUFBUSxHQUFFZCxLQUFLLENBQUNjLEVBQUUsR0FBR0YsTUFBTSxnQkFBRyxvQkFBQyxJQUFJLG9CQUFpQixDQUFPO0FBRWxILENBQUM7QUFFRFMsTUFBTSxDQUFDQyxPQUFPLEdBQUd2QixRQUFRIn0=