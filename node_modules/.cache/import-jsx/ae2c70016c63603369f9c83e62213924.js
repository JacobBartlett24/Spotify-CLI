const React = require('react');
const {
  useState,
  useEffect
} = React;
const {
  render,
  useApp,
  useInput,
  Text
} = require("ink");
const API = require('../SpotifyAPI/API');
const fs = require('fs');
const data = require('../SpotifyAPI/data.json');
const importJsx = require('import-jsx');
const MainBox = importJsx('./MainBox');
const APIui = () => {
  const [result, setResult] = useState('');
  const {
    exit
  } = useApp();
  const controller = new AbortController();
  useEffect(() => {
    console.log(result);
    if (result !== '') {
      render( /*#__PURE__*/React.createElement(MainBox, {
        title: "Spotify",
        userInformation: result
      }));
    }
  }, [result]);
  fs.watch('./SpotifyAPI/data.json', () => {
    setResult(fs.readFileSync('./SpotifyAPI/data.json').toString());
    console.log(result);
  });
  useInput(async (input, key) => {
    if (input === 'q') {
      exit();
    } else if (input === 'a') {
      API();
    }
  });
  this.cancelRequest = () => controller.abort();
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Text, null, "Hit \"a\" to connect to UI"));
};
module.exports = APIui;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsInJlbmRlciIsInVzZUFwcCIsInVzZUlucHV0IiwiVGV4dCIsIkFQSSIsImZzIiwiZGF0YSIsImltcG9ydEpzeCIsIk1haW5Cb3giLCJBUEl1aSIsInJlc3VsdCIsInNldFJlc3VsdCIsImV4aXQiLCJjb250cm9sbGVyIiwiQWJvcnRDb250cm9sbGVyIiwiY29uc29sZSIsImxvZyIsIndhdGNoIiwicmVhZEZpbGVTeW5jIiwidG9TdHJpbmciLCJpbnB1dCIsImtleSIsImNhbmNlbFJlcXVlc3QiLCJhYm9ydCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJBUEl1aS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSA9IFJlYWN0O1xuY29uc3QgeyByZW5kZXIsIHVzZUFwcCwgdXNlSW5wdXQsIFRleHQgfSA9IHJlcXVpcmUoXCJpbmtcIik7XG5jb25zdCBBUEkgPSByZXF1aXJlKCcuLi9TcG90aWZ5QVBJL0FQSScpXG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJylcbmNvbnN0IGRhdGEgPSByZXF1aXJlKCcuLi9TcG90aWZ5QVBJL2RhdGEuanNvbicpO1xuY29uc3QgaW1wb3J0SnN4ID0gcmVxdWlyZSgnaW1wb3J0LWpzeCcpO1xuY29uc3QgTWFpbkJveCA9IGltcG9ydEpzeCgnLi9NYWluQm94JylcblxuY29uc3QgQVBJdWkgPSAoKSA9PntcbiAgXG4gIGNvbnN0IFtyZXN1bHQsIHNldFJlc3VsdF0gPSB1c2VTdGF0ZSgnJylcbiAgY29uc3Qge2V4aXR9ID0gdXNlQXBwKCk7XG4gIGNvbnN0IGNvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKClcblxuICB1c2VFZmZlY3QoKCkgPT57XG4gICAgY29uc29sZS5sb2cocmVzdWx0KVxuICAgIGlmKHJlc3VsdCAhPT0gJycpe1xuICAgICAgcmVuZGVyKDxNYWluQm94IHRpdGxlPSdTcG90aWZ5JyB1c2VySW5mb3JtYXRpb249e3Jlc3VsdH0vPilcbiAgICB9XG4gIH0sW3Jlc3VsdF0pXG5cbiAgZnMud2F0Y2goJy4vU3BvdGlmeUFQSS9kYXRhLmpzb24nLCAoKSA9PiB7XG4gICAgc2V0UmVzdWx0KGZzLnJlYWRGaWxlU3luYygnLi9TcG90aWZ5QVBJL2RhdGEuanNvbicpLnRvU3RyaW5nKCkpO1xuICAgIGNvbnNvbGUubG9nKHJlc3VsdClcbiAgfSlcblxuICB1c2VJbnB1dChhc3luYyAoaW5wdXQsIGtleSkgPT4ge1xuXHQgIGlmIChpbnB1dCA9PT0gJ3EnKSB7XG5cdFx0ICBleGl0KClcbiAgICB9ZWxzZSBpZihpbnB1dCA9PT0gJ2EnKXtcbiAgICAgIEFQSSgpXG4gICAgfVxuXHR9KTtcblxuICB0aGlzLmNhbmNlbFJlcXVlc3QgPSAoKSA9PiBjb250cm9sbGVyLmFib3J0KClcblxuICByZXR1cm4oXG4gICAgPD5cbiAgICAgIDxUZXh0PkhpdCBcImFcIiB0byBjb25uZWN0IHRvIFVJPC9UZXh0PlxuICAgIDwvPlxuICApXG4gIFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEFQSXVpOyJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBTyxDQUFDO0FBQzlCLE1BQU07RUFBRUMsUUFBUTtFQUFFQztBQUFVLENBQUMsR0FBR0gsS0FBSztBQUNyQyxNQUFNO0VBQUVJLE1BQU07RUFBRUMsTUFBTTtFQUFFQyxRQUFRO0VBQUVDO0FBQUssQ0FBQyxHQUFHTixPQUFPLENBQUMsS0FBSyxDQUFDO0FBQ3pELE1BQU1PLEdBQUcsR0FBR1AsT0FBTyxDQUFDLG1CQUFtQixDQUFDO0FBQ3hDLE1BQU1RLEVBQUUsR0FBR1IsT0FBTyxDQUFDLElBQUksQ0FBQztBQUN4QixNQUFNUyxJQUFJLEdBQUdULE9BQU8sQ0FBQyx5QkFBeUIsQ0FBQztBQUMvQyxNQUFNVSxTQUFTLEdBQUdWLE9BQU8sQ0FBQyxZQUFZLENBQUM7QUFDdkMsTUFBTVcsT0FBTyxHQUFHRCxTQUFTLENBQUMsV0FBVyxDQUFDO0FBRXRDLE1BQU1FLEtBQUssR0FBRyxNQUFLO0VBRWpCLE1BQU0sQ0FBQ0MsTUFBTSxFQUFFQyxTQUFTLENBQUMsR0FBR2IsUUFBUSxDQUFDLEVBQUUsQ0FBQztFQUN4QyxNQUFNO0lBQUNjO0VBQUksQ0FBQyxHQUFHWCxNQUFNLEVBQUU7RUFDdkIsTUFBTVksVUFBVSxHQUFHLElBQUlDLGVBQWUsRUFBRTtFQUV4Q2YsU0FBUyxDQUFDLE1BQUs7SUFDYmdCLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDTixNQUFNLENBQUM7SUFDbkIsSUFBR0EsTUFBTSxLQUFLLEVBQUUsRUFBQztNQUNmVixNQUFNLGVBQUMsb0JBQUMsT0FBTztRQUFDLEtBQUssRUFBQyxTQUFTO1FBQUMsZUFBZSxFQUFFVTtNQUFPLEVBQUUsQ0FBQztJQUM3RDtFQUNGLENBQUMsRUFBQyxDQUFDQSxNQUFNLENBQUMsQ0FBQztFQUVYTCxFQUFFLENBQUNZLEtBQUssQ0FBQyx3QkFBd0IsRUFBRSxNQUFNO0lBQ3ZDTixTQUFTLENBQUNOLEVBQUUsQ0FBQ2EsWUFBWSxDQUFDLHdCQUF3QixDQUFDLENBQUNDLFFBQVEsRUFBRSxDQUFDO0lBQy9ESixPQUFPLENBQUNDLEdBQUcsQ0FBQ04sTUFBTSxDQUFDO0VBQ3JCLENBQUMsQ0FBQztFQUVGUixRQUFRLENBQUMsT0FBT2tCLEtBQUssRUFBRUMsR0FBRyxLQUFLO0lBQzlCLElBQUlELEtBQUssS0FBSyxHQUFHLEVBQUU7TUFDbEJSLElBQUksRUFBRTtJQUNOLENBQUMsTUFBSyxJQUFHUSxLQUFLLEtBQUssR0FBRyxFQUFDO01BQ3JCaEIsR0FBRyxFQUFFO0lBQ1A7RUFDSCxDQUFDLENBQUM7RUFFRCxJQUFJLENBQUNrQixhQUFhLEdBQUcsTUFBTVQsVUFBVSxDQUFDVSxLQUFLLEVBQUU7RUFFN0Msb0JBQ0UsdURBQ0Usb0JBQUMsSUFBSSxxQ0FBZ0MsQ0FDcEM7QUFHUCxDQUFDO0FBRURDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHaEIsS0FBSyJ9