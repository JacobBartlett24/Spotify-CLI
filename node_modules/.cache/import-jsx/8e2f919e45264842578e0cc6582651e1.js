const React = require('react');
const {
  useState,
  useEffect
} = React;
const {
  Box,
  Text,
  Newline,
  useFocus
} = require('ink');
const BigText = require('ink-big-text');
const axios = require('axios');
const {
  useRef
} = require('react');
const PlaylistPage = props => {
  const [playlistData, setPlaylistData] = useState([]);
  useEffect(async () => {
    const playlists = await axios.get('/me/playlists');
    setPlaylistData(playlists.data.items.map((playlist, i) => /*#__PURE__*/React.createElement(Playlist, {
      key: playlist.id,
      playlistId: playlist.id,
      playlistName: playlist.name,
      populate: props.populate
    })));
  }, []);
  useEffect(() => {
    playlistData.forEach(element => {
      console.log(element);
    });
  }, [playlistData]);
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: "column"
  }, /*#__PURE__*/React.createElement(Text, null, "Playlist Page"), /*#__PURE__*/React.createElement(Newline, null), playlistData);
};
const Playlist = props => {
  const {
    isFocused
  } = useFocus();
  return /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, {
    color: isFocused ? 'green' : 'white',
    bold: true
  }, isFocused ? props.populate(props.playlistId) : '', props.playlistName), /*#__PURE__*/React.createElement(Newline, null));
};
module.exports = PlaylistPage;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsIkJveCIsIlRleHQiLCJOZXdsaW5lIiwidXNlRm9jdXMiLCJCaWdUZXh0IiwiYXhpb3MiLCJ1c2VSZWYiLCJQbGF5bGlzdFBhZ2UiLCJwcm9wcyIsInBsYXlsaXN0RGF0YSIsInNldFBsYXlsaXN0RGF0YSIsInBsYXlsaXN0cyIsImdldCIsImRhdGEiLCJpdGVtcyIsIm1hcCIsInBsYXlsaXN0IiwiaSIsImlkIiwibmFtZSIsInBvcHVsYXRlIiwiZm9yRWFjaCIsImVsZW1lbnQiLCJjb25zb2xlIiwibG9nIiwiUGxheWxpc3QiLCJpc0ZvY3VzZWQiLCJwbGF5bGlzdElkIiwicGxheWxpc3ROYW1lIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIlBsYXlsaXN0UGFnZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSA9IFJlYWN0O1xuY29uc3QgeyBCb3gsIFRleHQsIE5ld2xpbmUsIHVzZUZvY3VzIH0gPSByZXF1aXJlKCdpbmsnKTtcbmNvbnN0IEJpZ1RleHQgPSByZXF1aXJlKCdpbmstYmlnLXRleHQnKTtcbmNvbnN0IGF4aW9zID0gcmVxdWlyZSgnYXhpb3MnKTtcbmNvbnN0IHsgdXNlUmVmIH0gPSByZXF1aXJlKCdyZWFjdCcpO1xuXG5jb25zdCBQbGF5bGlzdFBhZ2UgPSAocHJvcHMpID0+e1xuXG4gICAgY29uc3QgW3BsYXlsaXN0RGF0YSxzZXRQbGF5bGlzdERhdGFdID0gdXNlU3RhdGUoW10pO1xuICAgIFxuXG4gICAgdXNlRWZmZWN0KGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgcGxheWxpc3RzID0gYXdhaXQgYXhpb3MuZ2V0KCcvbWUvcGxheWxpc3RzJylcblxuICAgICAgICBzZXRQbGF5bGlzdERhdGEocGxheWxpc3RzLmRhdGEuaXRlbXMubWFwKChwbGF5bGlzdCwgaSkgPT5cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgPFBsYXlsaXN0IGtleT17cGxheWxpc3QuaWR9IHBsYXlsaXN0SWQ9e3BsYXlsaXN0LmlkfSBwbGF5bGlzdE5hbWU9e3BsYXlsaXN0Lm5hbWV9IHBvcHVsYXRlPXtwcm9wcy5wb3B1bGF0ZX0vPlxuICAgICAgICApKTtcbiAgICB9LFtdKVxuICAgIFxuICAgIHVzZUVmZmVjdCgoKSA9PntcbiAgICAgICAgcGxheWxpc3REYXRhLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlbGVtZW50KVxuICAgICAgICB9KTtcbiAgICB9LCBbcGxheWxpc3REYXRhXSlcblxuXG5cbiAgICByZXR1cm4oXG4gICAgICAgIDxCb3ggZmxleERpcmVjdGlvbj0nY29sdW1uJz5cbiAgICAgICAgICAgIDxUZXh0PlBsYXlsaXN0IFBhZ2U8L1RleHQ+XG4gICAgICAgICAgICA8TmV3bGluZSAvPlxuICAgICAgICAgICAge3BsYXlsaXN0RGF0YX1cbiAgICAgICAgPC9Cb3g+XG4gICAgKVxufVxuXG5jb25zdCBQbGF5bGlzdCA9IChwcm9wcykgPT57XG4gICAgY29uc3Qge2lzRm9jdXNlZH0gPSB1c2VGb2N1cygpO1xuICAgIFxuXG5cblxuICAgIHJldHVybihcbiAgICAgICAgPEJveD5cbiAgICAgICAgICAgIDxUZXh0IGNvbG9yPXtpc0ZvY3VzZWQgPyAnZ3JlZW4nIDogJ3doaXRlJ30gYm9sZD57aXNGb2N1c2VkID8gcHJvcHMucG9wdWxhdGUocHJvcHMucGxheWxpc3RJZCkgOiAnJ317cHJvcHMucGxheWxpc3ROYW1lfTwvVGV4dD5cbiAgICAgICAgICAgIDxOZXdsaW5lIC8+XG4gICAgICAgIDwvQm94PlxuICAgIClcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBQbGF5bGlzdFBhZ2U7XG5cbiJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBTyxDQUFDO0FBQzlCLE1BQU07RUFBRUMsUUFBUTtFQUFFQztBQUFVLENBQUMsR0FBR0gsS0FBSztBQUNyQyxNQUFNO0VBQUVJLEdBQUc7RUFBRUMsSUFBSTtFQUFFQyxPQUFPO0VBQUVDO0FBQVMsQ0FBQyxHQUFHTixPQUFPLENBQUMsS0FBSyxDQUFDO0FBQ3ZELE1BQU1PLE9BQU8sR0FBR1AsT0FBTyxDQUFDLGNBQWMsQ0FBQztBQUN2QyxNQUFNUSxLQUFLLEdBQUdSLE9BQU8sQ0FBQyxPQUFPLENBQUM7QUFDOUIsTUFBTTtFQUFFUztBQUFPLENBQUMsR0FBR1QsT0FBTyxDQUFDLE9BQU8sQ0FBQztBQUVuQyxNQUFNVSxZQUFZLEdBQUlDLEtBQUssSUFBSTtFQUUzQixNQUFNLENBQUNDLFlBQVksRUFBQ0MsZUFBZSxDQUFDLEdBQUdaLFFBQVEsQ0FBQyxFQUFFLENBQUM7RUFHbkRDLFNBQVMsQ0FBQyxZQUFZO0lBQ2xCLE1BQU1ZLFNBQVMsR0FBRyxNQUFNTixLQUFLLENBQUNPLEdBQUcsQ0FBQyxlQUFlLENBQUM7SUFFbERGLGVBQWUsQ0FBQ0MsU0FBUyxDQUFDRSxJQUFJLENBQUNDLEtBQUssQ0FBQ0MsR0FBRyxDQUFDLENBQUNDLFFBQVEsRUFBRUMsQ0FBQyxrQkFFakQsb0JBQUMsUUFBUTtNQUFDLEdBQUcsRUFBRUQsUUFBUSxDQUFDRSxFQUFHO01BQUMsVUFBVSxFQUFFRixRQUFRLENBQUNFLEVBQUc7TUFBQyxZQUFZLEVBQUVGLFFBQVEsQ0FBQ0csSUFBSztNQUFDLFFBQVEsRUFBRVgsS0FBSyxDQUFDWTtJQUFTLEVBQUUsQ0FDaEgsQ0FBQztFQUNOLENBQUMsRUFBQyxFQUFFLENBQUM7RUFFTHJCLFNBQVMsQ0FBQyxNQUFLO0lBQ1hVLFlBQVksQ0FBQ1ksT0FBTyxDQUFDQyxPQUFPLElBQUk7TUFDNUJDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDRixPQUFPLENBQUM7SUFDeEIsQ0FBQyxDQUFDO0VBQ04sQ0FBQyxFQUFFLENBQUNiLFlBQVksQ0FBQyxDQUFDO0VBSWxCLG9CQUNJLG9CQUFDLEdBQUc7SUFBQyxhQUFhLEVBQUM7RUFBUSxnQkFDdkIsb0JBQUMsSUFBSSx3QkFBcUIsZUFDMUIsb0JBQUMsT0FBTyxPQUFHLEVBQ1ZBLFlBQVksQ0FDWDtBQUVkLENBQUM7QUFFRCxNQUFNZ0IsUUFBUSxHQUFJakIsS0FBSyxJQUFJO0VBQ3ZCLE1BQU07SUFBQ2tCO0VBQVMsQ0FBQyxHQUFHdkIsUUFBUSxFQUFFO0VBSzlCLG9CQUNJLG9CQUFDLEdBQUcscUJBQ0Esb0JBQUMsSUFBSTtJQUFDLEtBQUssRUFBRXVCLFNBQVMsR0FBRyxPQUFPLEdBQUcsT0FBUTtJQUFDLElBQUk7RUFBQSxHQUFFQSxTQUFTLEdBQUdsQixLQUFLLENBQUNZLFFBQVEsQ0FBQ1osS0FBSyxDQUFDbUIsVUFBVSxDQUFDLEdBQUcsRUFBRSxFQUFFbkIsS0FBSyxDQUFDb0IsWUFBWSxDQUFRLGVBQy9ILG9CQUFDLE9BQU8sT0FBRyxDQUNUO0FBRWQsQ0FBQztBQUVEQyxNQUFNLENBQUNDLE9BQU8sR0FBR3ZCLFlBQVkifQ==