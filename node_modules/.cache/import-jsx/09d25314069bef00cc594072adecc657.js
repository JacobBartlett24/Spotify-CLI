const React = require('react');
const {
  useState,
  useEffect
} = React;
const {
  Box,
  Text,
  Newline
} = require('ink');
const BigText = require('ink-big-text');
const Gradient = require('ink-gradient');
const axios = require('axios');

// Spotify client required parameters

const MainView = props => {
  const [data, setData] = useState('');
  const [playlist, setPlaylist] = useState(null);
  useEffect(async () => {
    const temp = await axios.get('/me');
    setData(temp.data.display_name);
  }, []);
  useEffect(async () => {
    if (props.playlistId !== '') {
      const playlistInfo = await axios.get(`/playlists/${props.playlistId}`);
      setPlaylist(playlistInfo);
    }
  }, [props.playlistId]);
  return /*#__PURE__*/React.createElement(Box, {
    height: "20%",
    width: "100%",
    borderStyle: "single",
    flexDirection: "column",
    alignItems: "center",
    justifyContent: "center",
    padding: 2
  }, /*#__PURE__*/React.createElement(BigText, {
    text: playlist ? playlist.data.name : 'Playlist Name',
    font: "tiny"
  }), /*#__PURE__*/React.createElement(Tracks, {
    id: playlist ? props.playlistId : ''
  }));
};
const Tracks = props => {
  const [tracks, setTracks] = useState([]);
  useEffect(async () => {
    if (props.id !== '') {
      const temp = await axios.get(`/playlists/${props.id}/tracks`);
      setTracks(temp.data.items.map((item, i) => /*#__PURE__*/React.createElement(Box, {
        key: i
      }, /*#__PURE__*/React.createElement(Text, null, item.track.name), /*#__PURE__*/React.createElement(Newline, null))));
    }
  }, [props.id]);
  return /*#__PURE__*/React.createElement(Box, {
    key: props.id,
    flexDirection: "column",
    height: "80%",
    width: "100%",
    borderStyle: "single"
  }, props.id ? tracks : /*#__PURE__*/React.createElement(Text, null, "no tracks"));
};
module.exports = MainView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsIkJveCIsIlRleHQiLCJOZXdsaW5lIiwiQmlnVGV4dCIsIkdyYWRpZW50IiwiYXhpb3MiLCJNYWluVmlldyIsInByb3BzIiwiZGF0YSIsInNldERhdGEiLCJwbGF5bGlzdCIsInNldFBsYXlsaXN0IiwidGVtcCIsImdldCIsImRpc3BsYXlfbmFtZSIsInBsYXlsaXN0SWQiLCJwbGF5bGlzdEluZm8iLCJuYW1lIiwiVHJhY2tzIiwidHJhY2tzIiwic2V0VHJhY2tzIiwiaWQiLCJpdGVtcyIsIm1hcCIsIml0ZW0iLCJpIiwidHJhY2siLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiTWFpblZpZXcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3QgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gPSBSZWFjdDtcbmNvbnN0IHsgQm94LCBUZXh0LCBOZXdsaW5lIH0gPSByZXF1aXJlKCdpbmsnKTtcbmNvbnN0IEJpZ1RleHQgPSByZXF1aXJlKCdpbmstYmlnLXRleHQnKTtcbmNvbnN0IEdyYWRpZW50ID0gcmVxdWlyZSgnaW5rLWdyYWRpZW50JylcbmNvbnN0IGF4aW9zID0gcmVxdWlyZSgnYXhpb3MnKVxuXG5cbi8vIFNwb3RpZnkgY2xpZW50IHJlcXVpcmVkIHBhcmFtZXRlcnNcblxuY29uc3QgTWFpblZpZXcgPSAocHJvcHMpID0+e1xuXG4gICAgY29uc3QgW2RhdGEsc2V0RGF0YV0gPSB1c2VTdGF0ZSgnJylcbiAgICBjb25zdCBbcGxheWxpc3Qsc2V0UGxheWxpc3RdID0gdXNlU3RhdGUobnVsbClcblxuICAgIHVzZUVmZmVjdChhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHRlbXAgPSBhd2FpdCBheGlvcy5nZXQoJy9tZScpXG4gICAgICAgIHNldERhdGEodGVtcC5kYXRhLmRpc3BsYXlfbmFtZSlcbiAgICB9LFtdKVxuXG4gICAgdXNlRWZmZWN0KGFzeW5jICgpID0+IHtcbiAgICAgICAgaWYocHJvcHMucGxheWxpc3RJZCAhPT0gJycpe1xuICAgICAgICAgICAgY29uc3QgcGxheWxpc3RJbmZvID0gYXdhaXQgYXhpb3MuZ2V0KGAvcGxheWxpc3RzLyR7cHJvcHMucGxheWxpc3RJZH1gKVxuICAgICAgICAgICAgc2V0UGxheWxpc3QocGxheWxpc3RJbmZvKVxuICAgICAgICB9XG4gICAgfSxbcHJvcHMucGxheWxpc3RJZF0pXG5cbiAgICByZXR1cm4oXG4gICAgICAgIDxCb3ggaGVpZ2h0PXtcIjIwJVwifSB3aWR0aD17XCIxMDAlXCJ9IGJvcmRlclN0eWxlPSdzaW5nbGUnIGZsZXhEaXJlY3Rpb249J2NvbHVtbicgYWxpZ25JdGVtcz0nY2VudGVyJyBqdXN0aWZ5Q29udGVudD0nY2VudGVyJyBwYWRkaW5nPXsyfT5cbiAgICAgICAgICAgIDxCaWdUZXh0XG4gICAgICAgICAgICAgIHRleHQ9IHtwbGF5bGlzdCA/IHBsYXlsaXN0LmRhdGEubmFtZSA6ICdQbGF5bGlzdCBOYW1lJ31cbiAgICAgICAgICAgICAgZm9udD0ndGlueSdcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8VHJhY2tzIGlkPXtwbGF5bGlzdCA/IHByb3BzLnBsYXlsaXN0SWQgOiAnJ30vPlxuXG4gICAgICAgIDwvQm94PlxuICAgIClcbn1cblxuY29uc3QgVHJhY2tzID0gKHByb3BzKSA9PntcbiAgICBjb25zdCBbdHJhY2tzLHNldFRyYWNrc10gPSB1c2VTdGF0ZShbXSlcbiAgICBcbiAgICB1c2VFZmZlY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgICBpZihwcm9wcy5pZCAhPT0gJycpe1xuICAgICAgICAgICAgY29uc3QgdGVtcCA9IGF3YWl0IGF4aW9zLmdldChgL3BsYXlsaXN0cy8ke3Byb3BzLmlkfS90cmFja3NgKVxuICAgICAgICAgICAgc2V0VHJhY2tzKHRlbXAuZGF0YS5pdGVtcy5tYXAoKGl0ZW0saSkgPT5cbiAgICAgICAgICAgICAgICA8Qm94IGtleT17aX0+XG4gICAgICAgICAgICAgICAgICAgIDxUZXh0PntpdGVtLnRyYWNrLm5hbWV9PC9UZXh0PlxuICAgICAgICAgICAgICAgICAgICA8TmV3bGluZSAvPlxuICAgICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgKSlcbiAgICAgICAgfVxuICAgIH0sW3Byb3BzLmlkXSlcblxuXG4gICAgcmV0dXJuKFxuICAgICAgICA8Qm94IGtleT17cHJvcHMuaWR9ZmxleERpcmVjdGlvbj0nY29sdW1uJyBoZWlnaHQ9e1wiODAlXCJ9IHdpZHRoPXtcIjEwMCVcIn0gYm9yZGVyU3R5bGU9J3NpbmdsZSc+e3Byb3BzLmlkID8gdHJhY2tzIDogPFRleHQ+bm8gdHJhY2tzPC9UZXh0Pn08L0JveD5cbiAgICApXG59XG5cbm1vZHVsZS5leHBvcnRzID0gTWFpblZpZXc7XG5cbiJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBTyxDQUFDO0FBQzlCLE1BQU07RUFBRUMsUUFBUTtFQUFFQztBQUFVLENBQUMsR0FBR0gsS0FBSztBQUNyQyxNQUFNO0VBQUVJLEdBQUc7RUFBRUMsSUFBSTtFQUFFQztBQUFRLENBQUMsR0FBR0wsT0FBTyxDQUFDLEtBQUssQ0FBQztBQUM3QyxNQUFNTSxPQUFPLEdBQUdOLE9BQU8sQ0FBQyxjQUFjLENBQUM7QUFDdkMsTUFBTU8sUUFBUSxHQUFHUCxPQUFPLENBQUMsY0FBYyxDQUFDO0FBQ3hDLE1BQU1RLEtBQUssR0FBR1IsT0FBTyxDQUFDLE9BQU8sQ0FBQzs7QUFHOUI7O0FBRUEsTUFBTVMsUUFBUSxHQUFJQyxLQUFLLElBQUk7RUFFdkIsTUFBTSxDQUFDQyxJQUFJLEVBQUNDLE9BQU8sQ0FBQyxHQUFHWCxRQUFRLENBQUMsRUFBRSxDQUFDO0VBQ25DLE1BQU0sQ0FBQ1ksUUFBUSxFQUFDQyxXQUFXLENBQUMsR0FBR2IsUUFBUSxDQUFDLElBQUksQ0FBQztFQUU3Q0MsU0FBUyxDQUFDLFlBQVk7SUFDbEIsTUFBTWEsSUFBSSxHQUFHLE1BQU1QLEtBQUssQ0FBQ1EsR0FBRyxDQUFDLEtBQUssQ0FBQztJQUNuQ0osT0FBTyxDQUFDRyxJQUFJLENBQUNKLElBQUksQ0FBQ00sWUFBWSxDQUFDO0VBQ25DLENBQUMsRUFBQyxFQUFFLENBQUM7RUFFTGYsU0FBUyxDQUFDLFlBQVk7SUFDbEIsSUFBR1EsS0FBSyxDQUFDUSxVQUFVLEtBQUssRUFBRSxFQUFDO01BQ3ZCLE1BQU1DLFlBQVksR0FBRyxNQUFNWCxLQUFLLENBQUNRLEdBQUcsQ0FBRSxjQUFhTixLQUFLLENBQUNRLFVBQVcsRUFBQyxDQUFDO01BQ3RFSixXQUFXLENBQUNLLFlBQVksQ0FBQztJQUM3QjtFQUNKLENBQUMsRUFBQyxDQUFDVCxLQUFLLENBQUNRLFVBQVUsQ0FBQyxDQUFDO0VBRXJCLG9CQUNJLG9CQUFDLEdBQUc7SUFBQyxNQUFNLEVBQUUsS0FBTTtJQUFDLEtBQUssRUFBRSxNQUFPO0lBQUMsV0FBVyxFQUFDLFFBQVE7SUFBQyxhQUFhLEVBQUMsUUFBUTtJQUFDLFVBQVUsRUFBQyxRQUFRO0lBQUMsY0FBYyxFQUFDLFFBQVE7SUFBQyxPQUFPLEVBQUU7RUFBRSxnQkFDbEksb0JBQUMsT0FBTztJQUNOLElBQUksRUFBR0wsUUFBUSxHQUFHQSxRQUFRLENBQUNGLElBQUksQ0FBQ1MsSUFBSSxHQUFHLGVBQWdCO0lBQ3ZELElBQUksRUFBQztFQUFNLEVBQ1gsZUFDRixvQkFBQyxNQUFNO0lBQUMsRUFBRSxFQUFFUCxRQUFRLEdBQUdILEtBQUssQ0FBQ1EsVUFBVSxHQUFHO0VBQUcsRUFBRSxDQUU3QztBQUVkLENBQUM7QUFFRCxNQUFNRyxNQUFNLEdBQUlYLEtBQUssSUFBSTtFQUNyQixNQUFNLENBQUNZLE1BQU0sRUFBQ0MsU0FBUyxDQUFDLEdBQUd0QixRQUFRLENBQUMsRUFBRSxDQUFDO0VBRXZDQyxTQUFTLENBQUMsWUFBWTtJQUNsQixJQUFHUSxLQUFLLENBQUNjLEVBQUUsS0FBSyxFQUFFLEVBQUM7TUFDZixNQUFNVCxJQUFJLEdBQUcsTUFBTVAsS0FBSyxDQUFDUSxHQUFHLENBQUUsY0FBYU4sS0FBSyxDQUFDYyxFQUFHLFNBQVEsQ0FBQztNQUM3REQsU0FBUyxDQUFDUixJQUFJLENBQUNKLElBQUksQ0FBQ2MsS0FBSyxDQUFDQyxHQUFHLENBQUMsQ0FBQ0MsSUFBSSxFQUFDQyxDQUFDLGtCQUNqQyxvQkFBQyxHQUFHO1FBQUMsR0FBRyxFQUFFQTtNQUFFLGdCQUNSLG9CQUFDLElBQUksUUFBRUQsSUFBSSxDQUFDRSxLQUFLLENBQUNULElBQUksQ0FBUSxlQUM5QixvQkFBQyxPQUFPLE9BQUcsQ0FDVCxDQUNULENBQUM7SUFDTjtFQUNKLENBQUMsRUFBQyxDQUFDVixLQUFLLENBQUNjLEVBQUUsQ0FBQyxDQUFDO0VBR2Isb0JBQ0ksb0JBQUMsR0FBRztJQUFDLEdBQUcsRUFBRWQsS0FBSyxDQUFDYyxFQUFHO0lBQUEsYUFBYSxFQUFDLFFBQVE7SUFBQyxNQUFNLEVBQUUsS0FBTTtJQUFDLEtBQUssRUFBRSxNQUFPO0lBQUMsV0FBVyxFQUFDO0VBQVEsR0FBRWQsS0FBSyxDQUFDYyxFQUFFLEdBQUdGLE1BQU0sZ0JBQUcsb0JBQUMsSUFBSSxvQkFBaUIsQ0FBTztBQUV2SixDQUFDO0FBRURRLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHdEIsUUFBUSJ9