const React = require('react');
const {
  useState,
  useEffect
} = React;
const {
  Box,
  Text,
  Newline,
  useFocus
} = require('ink');
const BigText = require('ink-big-text');
const axios = require('axios');
const PlaylistPage = props => {
  const [playlistData, setPlaylistData] = useState([]);
  useEffect(async () => {
    const playlists = await axios.get('/me/playlists');
    setPlaylistData(playlists.data.items.map((playlist, i) => /*#__PURE__*/React.createElement(Playlist, {
      key: playlist.id,
      playlistId: playlist.id,
      playlistName: playlist.name,
      populate: props.populate
    })));
  }, []);
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: "column"
  }, /*#__PURE__*/React.createElement(Text, null, "Playlist Page"), /*#__PURE__*/React.createElement(Newline, null), playlistData);
};
const Playlist = props => {
  const {
    isFocused
  } = useFocus();
  return /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, {
    color: isFocused ? 'green' : 'white',
    bold: true
  }, isFocused ? props.populate(props.playlistId) : '', props.playlistName), /*#__PURE__*/React.createElement(Newline, null));
};
module.exports = PlaylistPage;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsIkJveCIsIlRleHQiLCJOZXdsaW5lIiwidXNlRm9jdXMiLCJCaWdUZXh0IiwiYXhpb3MiLCJQbGF5bGlzdFBhZ2UiLCJwcm9wcyIsInBsYXlsaXN0RGF0YSIsInNldFBsYXlsaXN0RGF0YSIsInBsYXlsaXN0cyIsImdldCIsImRhdGEiLCJpdGVtcyIsIm1hcCIsInBsYXlsaXN0IiwiaSIsImlkIiwibmFtZSIsInBvcHVsYXRlIiwiUGxheWxpc3QiLCJpc0ZvY3VzZWQiLCJwbGF5bGlzdElkIiwicGxheWxpc3ROYW1lIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIlBsYXlsaXN0UGFnZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSA9IFJlYWN0O1xuY29uc3QgeyBCb3gsIFRleHQsIE5ld2xpbmUsIHVzZUZvY3VzIH0gPSByZXF1aXJlKCdpbmsnKTtcbmNvbnN0IEJpZ1RleHQgPSByZXF1aXJlKCdpbmstYmlnLXRleHQnKTtcbmNvbnN0IGF4aW9zID0gcmVxdWlyZSgnYXhpb3MnKTtcblxuY29uc3QgUGxheWxpc3RQYWdlID0gKHByb3BzKSA9PntcblxuICAgIGNvbnN0IFtwbGF5bGlzdERhdGEsc2V0UGxheWxpc3REYXRhXSA9IHVzZVN0YXRlKFtdKTtcblxuICAgIHVzZUVmZmVjdChhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHBsYXlsaXN0cyA9IGF3YWl0IGF4aW9zLmdldCgnL21lL3BsYXlsaXN0cycpXG5cbiAgICAgICAgc2V0UGxheWxpc3REYXRhKHBsYXlsaXN0cy5kYXRhLml0ZW1zLm1hcCgocGxheWxpc3QsIGkpID0+XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIDxQbGF5bGlzdCBrZXk9e3BsYXlsaXN0LmlkfSBwbGF5bGlzdElkPXtwbGF5bGlzdC5pZH0gcGxheWxpc3ROYW1lPXtwbGF5bGlzdC5uYW1lfSBwb3B1bGF0ZT17cHJvcHMucG9wdWxhdGV9Lz5cbiAgICAgICAgKSk7XG4gICAgfSxbXSlcbiAgICBcbiAgICByZXR1cm4oXG4gICAgICAgIDxCb3ggZmxleERpcmVjdGlvbj0nY29sdW1uJz5cbiAgICAgICAgICAgIDxUZXh0PlBsYXlsaXN0IFBhZ2U8L1RleHQ+XG4gICAgICAgICAgICA8TmV3bGluZSAvPlxuICAgICAgICAgICAge3BsYXlsaXN0RGF0YX1cbiAgICAgICAgPC9Cb3g+XG4gICAgKVxufVxuXG5jb25zdCBQbGF5bGlzdCA9IChwcm9wcykgPT57XG4gICAgY29uc3Qge2lzRm9jdXNlZH0gPSB1c2VGb2N1cygpO1xuXG4gICAgcmV0dXJuKFxuICAgICAgICA8Qm94PlxuICAgICAgICAgICAgPFRleHQgY29sb3I9e2lzRm9jdXNlZCA/ICdncmVlbicgOiAnd2hpdGUnfSBcbiAgICAgICAgICAgICAgICAgICAgYm9sZD5cbiAgICAgICAgICAgIHtpc0ZvY3VzZWQgPyBwcm9wcy5wb3B1bGF0ZShwcm9wcy5wbGF5bGlzdElkKSA6ICcnfXtwcm9wcy5wbGF5bGlzdE5hbWV9XG4gICAgICAgICAgICA8L1RleHQ+XG4gICAgICAgICAgICA8TmV3bGluZSAvPlxuICAgICAgICA8L0JveD5cbiAgICApXG59XG5cbm1vZHVsZS5leHBvcnRzID0gUGxheWxpc3RQYWdlO1xuXG4iXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQU8sQ0FBQztBQUM5QixNQUFNO0VBQUVDLFFBQVE7RUFBRUM7QUFBVSxDQUFDLEdBQUdILEtBQUs7QUFDckMsTUFBTTtFQUFFSSxHQUFHO0VBQUVDLElBQUk7RUFBRUMsT0FBTztFQUFFQztBQUFTLENBQUMsR0FBR04sT0FBTyxDQUFDLEtBQUssQ0FBQztBQUN2RCxNQUFNTyxPQUFPLEdBQUdQLE9BQU8sQ0FBQyxjQUFjLENBQUM7QUFDdkMsTUFBTVEsS0FBSyxHQUFHUixPQUFPLENBQUMsT0FBTyxDQUFDO0FBRTlCLE1BQU1TLFlBQVksR0FBSUMsS0FBSyxJQUFJO0VBRTNCLE1BQU0sQ0FBQ0MsWUFBWSxFQUFDQyxlQUFlLENBQUMsR0FBR1gsUUFBUSxDQUFDLEVBQUUsQ0FBQztFQUVuREMsU0FBUyxDQUFDLFlBQVk7SUFDbEIsTUFBTVcsU0FBUyxHQUFHLE1BQU1MLEtBQUssQ0FBQ00sR0FBRyxDQUFDLGVBQWUsQ0FBQztJQUVsREYsZUFBZSxDQUFDQyxTQUFTLENBQUNFLElBQUksQ0FBQ0MsS0FBSyxDQUFDQyxHQUFHLENBQUMsQ0FBQ0MsUUFBUSxFQUFFQyxDQUFDLGtCQUVqRCxvQkFBQyxRQUFRO01BQUMsR0FBRyxFQUFFRCxRQUFRLENBQUNFLEVBQUc7TUFBQyxVQUFVLEVBQUVGLFFBQVEsQ0FBQ0UsRUFBRztNQUFDLFlBQVksRUFBRUYsUUFBUSxDQUFDRyxJQUFLO01BQUMsUUFBUSxFQUFFWCxLQUFLLENBQUNZO0lBQVMsRUFBRSxDQUNoSCxDQUFDO0VBQ04sQ0FBQyxFQUFDLEVBQUUsQ0FBQztFQUVMLG9CQUNJLG9CQUFDLEdBQUc7SUFBQyxhQUFhLEVBQUM7RUFBUSxnQkFDdkIsb0JBQUMsSUFBSSx3QkFBcUIsZUFDMUIsb0JBQUMsT0FBTyxPQUFHLEVBQ1ZYLFlBQVksQ0FDWDtBQUVkLENBQUM7QUFFRCxNQUFNWSxRQUFRLEdBQUliLEtBQUssSUFBSTtFQUN2QixNQUFNO0lBQUNjO0VBQVMsQ0FBQyxHQUFHbEIsUUFBUSxFQUFFO0VBRTlCLG9CQUNJLG9CQUFDLEdBQUcscUJBQ0Esb0JBQUMsSUFBSTtJQUFDLEtBQUssRUFBRWtCLFNBQVMsR0FBRyxPQUFPLEdBQUcsT0FBUTtJQUNuQyxJQUFJO0VBQUEsR0FDWEEsU0FBUyxHQUFHZCxLQUFLLENBQUNZLFFBQVEsQ0FBQ1osS0FBSyxDQUFDZSxVQUFVLENBQUMsR0FBRyxFQUFFLEVBQUVmLEtBQUssQ0FBQ2dCLFlBQVksQ0FDL0QsZUFDUCxvQkFBQyxPQUFPLE9BQUcsQ0FDVDtBQUVkLENBQUM7QUFFREMsTUFBTSxDQUFDQyxPQUFPLEdBQUduQixZQUFZIn0=