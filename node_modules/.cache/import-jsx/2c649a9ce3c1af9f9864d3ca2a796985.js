const React = require('react');
const {
  useState,
  useEffect
} = React;
const {
  Box,
  Text,
  Newline,
  useFocus
} = require('ink');
const BigText = require('ink-big-text');
const axios = require('axios');
const {
  useRef
} = require('react');
const PlaylistPage = props => {
  const [playlistData, setPlaylistData] = useState([]);
  useEffect(async () => {
    const playlists = await axios.get('/me/playlists');
    setPlaylistData(playlists.data.items.map((playlist, i) => /*#__PURE__*/React.createElement(Playlist, {
      key: playlist.id,
      playlistId: playlist.id,
      playlistName: playlist.name,
      populate: props.populate
    })));
  }, []);
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: "column"
  }, /*#__PURE__*/React.createElement(Text, null, "Playlist Page"), /*#__PURE__*/React.createElement(Newline, null), playlistData);
};
const Playlist = props => {
  const {
    isFocused
  } = useFocus();
  return /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, {
    color: isFocused ? 'green' : 'white',
    bold: true
  }, isFocused ? props.populate(props.playlistId) : '', props.playlistName), /*#__PURE__*/React.createElement(Newline, null));
};
module.exports = PlaylistPage;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsIkJveCIsIlRleHQiLCJOZXdsaW5lIiwidXNlRm9jdXMiLCJCaWdUZXh0IiwiYXhpb3MiLCJ1c2VSZWYiLCJQbGF5bGlzdFBhZ2UiLCJwcm9wcyIsInBsYXlsaXN0RGF0YSIsInNldFBsYXlsaXN0RGF0YSIsInBsYXlsaXN0cyIsImdldCIsImRhdGEiLCJpdGVtcyIsIm1hcCIsInBsYXlsaXN0IiwiaSIsImlkIiwibmFtZSIsInBvcHVsYXRlIiwiUGxheWxpc3QiLCJpc0ZvY3VzZWQiLCJwbGF5bGlzdElkIiwicGxheWxpc3ROYW1lIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIlBsYXlsaXN0UGFnZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSA9IFJlYWN0O1xuY29uc3QgeyBCb3gsIFRleHQsIE5ld2xpbmUsIHVzZUZvY3VzIH0gPSByZXF1aXJlKCdpbmsnKTtcbmNvbnN0IEJpZ1RleHQgPSByZXF1aXJlKCdpbmstYmlnLXRleHQnKTtcbmNvbnN0IGF4aW9zID0gcmVxdWlyZSgnYXhpb3MnKTtcbmNvbnN0IHsgdXNlUmVmIH0gPSByZXF1aXJlKCdyZWFjdCcpO1xuXG5jb25zdCBQbGF5bGlzdFBhZ2UgPSAocHJvcHMpID0+e1xuXG4gICAgY29uc3QgW3BsYXlsaXN0RGF0YSxzZXRQbGF5bGlzdERhdGFdID0gdXNlU3RhdGUoW10pO1xuICAgIFxuXG4gICAgdXNlRWZmZWN0KGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgcGxheWxpc3RzID0gYXdhaXQgYXhpb3MuZ2V0KCcvbWUvcGxheWxpc3RzJylcblxuICAgICAgICBzZXRQbGF5bGlzdERhdGEocGxheWxpc3RzLmRhdGEuaXRlbXMubWFwKChwbGF5bGlzdCwgaSkgPT5cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgPFBsYXlsaXN0IGtleT17cGxheWxpc3QuaWR9IHBsYXlsaXN0SWQ9e3BsYXlsaXN0LmlkfSBwbGF5bGlzdE5hbWU9e3BsYXlsaXN0Lm5hbWV9IHBvcHVsYXRlPXtwcm9wcy5wb3B1bGF0ZX0vPlxuICAgICAgICApKTtcbiAgICB9LFtdKVxuICAgIFxuICAgIHJldHVybihcbiAgICAgICAgPEJveCBmbGV4RGlyZWN0aW9uPSdjb2x1bW4nPlxuICAgICAgICAgICAgPFRleHQ+UGxheWxpc3QgUGFnZTwvVGV4dD5cbiAgICAgICAgICAgIDxOZXdsaW5lIC8+XG4gICAgICAgICAgICB7cGxheWxpc3REYXRhfVxuICAgICAgICA8L0JveD5cbiAgICApXG59XG5cbmNvbnN0IFBsYXlsaXN0ID0gKHByb3BzKSA9PntcbiAgICBjb25zdCB7aXNGb2N1c2VkfSA9IHVzZUZvY3VzKCk7XG5cbiAgICByZXR1cm4oXG4gICAgICAgIDxCb3g+XG4gICAgICAgICAgICA8VGV4dCBjb2xvcj17aXNGb2N1c2VkID8gJ2dyZWVuJyA6ICd3aGl0ZSd9IGJvbGQ+e2lzRm9jdXNlZCA/IHByb3BzLnBvcHVsYXRlKHByb3BzLnBsYXlsaXN0SWQpIDogJyd9e3Byb3BzLnBsYXlsaXN0TmFtZX08L1RleHQ+XG4gICAgICAgICAgICA8TmV3bGluZSAvPlxuICAgICAgICA8L0JveD5cbiAgICApXG59XG5cbm1vZHVsZS5leHBvcnRzID0gUGxheWxpc3RQYWdlO1xuXG4iXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQU8sQ0FBQztBQUM5QixNQUFNO0VBQUVDLFFBQVE7RUFBRUM7QUFBVSxDQUFDLEdBQUdILEtBQUs7QUFDckMsTUFBTTtFQUFFSSxHQUFHO0VBQUVDLElBQUk7RUFBRUMsT0FBTztFQUFFQztBQUFTLENBQUMsR0FBR04sT0FBTyxDQUFDLEtBQUssQ0FBQztBQUN2RCxNQUFNTyxPQUFPLEdBQUdQLE9BQU8sQ0FBQyxjQUFjLENBQUM7QUFDdkMsTUFBTVEsS0FBSyxHQUFHUixPQUFPLENBQUMsT0FBTyxDQUFDO0FBQzlCLE1BQU07RUFBRVM7QUFBTyxDQUFDLEdBQUdULE9BQU8sQ0FBQyxPQUFPLENBQUM7QUFFbkMsTUFBTVUsWUFBWSxHQUFJQyxLQUFLLElBQUk7RUFFM0IsTUFBTSxDQUFDQyxZQUFZLEVBQUNDLGVBQWUsQ0FBQyxHQUFHWixRQUFRLENBQUMsRUFBRSxDQUFDO0VBR25EQyxTQUFTLENBQUMsWUFBWTtJQUNsQixNQUFNWSxTQUFTLEdBQUcsTUFBTU4sS0FBSyxDQUFDTyxHQUFHLENBQUMsZUFBZSxDQUFDO0lBRWxERixlQUFlLENBQUNDLFNBQVMsQ0FBQ0UsSUFBSSxDQUFDQyxLQUFLLENBQUNDLEdBQUcsQ0FBQyxDQUFDQyxRQUFRLEVBQUVDLENBQUMsa0JBRWpELG9CQUFDLFFBQVE7TUFBQyxHQUFHLEVBQUVELFFBQVEsQ0FBQ0UsRUFBRztNQUFDLFVBQVUsRUFBRUYsUUFBUSxDQUFDRSxFQUFHO01BQUMsWUFBWSxFQUFFRixRQUFRLENBQUNHLElBQUs7TUFBQyxRQUFRLEVBQUVYLEtBQUssQ0FBQ1k7SUFBUyxFQUFFLENBQ2hILENBQUM7RUFDTixDQUFDLEVBQUMsRUFBRSxDQUFDO0VBRUwsb0JBQ0ksb0JBQUMsR0FBRztJQUFDLGFBQWEsRUFBQztFQUFRLGdCQUN2QixvQkFBQyxJQUFJLHdCQUFxQixlQUMxQixvQkFBQyxPQUFPLE9BQUcsRUFDVlgsWUFBWSxDQUNYO0FBRWQsQ0FBQztBQUVELE1BQU1ZLFFBQVEsR0FBSWIsS0FBSyxJQUFJO0VBQ3ZCLE1BQU07SUFBQ2M7RUFBUyxDQUFDLEdBQUduQixRQUFRLEVBQUU7RUFFOUIsb0JBQ0ksb0JBQUMsR0FBRyxxQkFDQSxvQkFBQyxJQUFJO0lBQUMsS0FBSyxFQUFFbUIsU0FBUyxHQUFHLE9BQU8sR0FBRyxPQUFRO0lBQUMsSUFBSTtFQUFBLEdBQUVBLFNBQVMsR0FBR2QsS0FBSyxDQUFDWSxRQUFRLENBQUNaLEtBQUssQ0FBQ2UsVUFBVSxDQUFDLEdBQUcsRUFBRSxFQUFFZixLQUFLLENBQUNnQixZQUFZLENBQVEsZUFDL0gsb0JBQUMsT0FBTyxPQUFHLENBQ1Q7QUFFZCxDQUFDO0FBRURDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHbkIsWUFBWSJ9