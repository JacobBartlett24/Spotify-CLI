const React = require('react');
const {
  useState,
  useEffect
} = React;
const {
  Box,
  Text,
  Newline
} = require('ink');
const BigText = require('ink-big-text');
const Gradient = require('ink-gradient');
const axios = require('axios');

// Spotify client required parameters

const MainView = props => {
  const [data, setData] = useState('');
  const [playlist, setPlaylist] = useState(null);
  useEffect(async () => {
    const temp = await axios.get('/me');
    setData(temp.data.display_name);
  }, []);
  useEffect(async () => {
    if (props.playlistId !== '') {
      const playlistInfo = await axios.get(`/playlists/${props.playlistId}`);
      setPlaylist(playlistInfo);
    }
  }, [props.playlistId]);
  return /*#__PURE__*/React.createElement(Box, {
    height: "100%",
    width: "100%",
    borderStyle: "single",
    flexDirection: "column",
    alignItems: "center",
    justifyContent: "center",
    padding: 2
  }, /*#__PURE__*/React.createElement(BigText, {
    text: playlist ? playlist.data.name : 'Playlist Name',
    font: "tiny"
  }), /*#__PURE__*/React.createElement(Tracks, {
    tracks: playlist ? playlist.data : ''
  }));
};
const Tracks = props => {
  if (props.tracks !== '') {
    console.log(props.tracks.items[0]);
  }
  return /*#__PURE__*/React.createElement(Text, null, "placeholder");
};
module.exports = MainView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsIkJveCIsIlRleHQiLCJOZXdsaW5lIiwiQmlnVGV4dCIsIkdyYWRpZW50IiwiYXhpb3MiLCJNYWluVmlldyIsInByb3BzIiwiZGF0YSIsInNldERhdGEiLCJwbGF5bGlzdCIsInNldFBsYXlsaXN0IiwidGVtcCIsImdldCIsImRpc3BsYXlfbmFtZSIsInBsYXlsaXN0SWQiLCJwbGF5bGlzdEluZm8iLCJuYW1lIiwiVHJhY2tzIiwidHJhY2tzIiwiY29uc29sZSIsImxvZyIsIml0ZW1zIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIk1haW5WaWV3LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9ID0gUmVhY3Q7XG5jb25zdCB7IEJveCwgVGV4dCwgTmV3bGluZSB9ID0gcmVxdWlyZSgnaW5rJyk7XG5jb25zdCBCaWdUZXh0ID0gcmVxdWlyZSgnaW5rLWJpZy10ZXh0Jyk7XG5jb25zdCBHcmFkaWVudCA9IHJlcXVpcmUoJ2luay1ncmFkaWVudCcpXG5jb25zdCBheGlvcyA9IHJlcXVpcmUoJ2F4aW9zJylcblxuXG4vLyBTcG90aWZ5IGNsaWVudCByZXF1aXJlZCBwYXJhbWV0ZXJzXG5cbmNvbnN0IE1haW5WaWV3ID0gKHByb3BzKSA9PntcblxuICAgIGNvbnN0IFtkYXRhLHNldERhdGFdID0gdXNlU3RhdGUoJycpXG4gICAgY29uc3QgW3BsYXlsaXN0LHNldFBsYXlsaXN0XSA9IHVzZVN0YXRlKG51bGwpXG5cbiAgICB1c2VFZmZlY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCB0ZW1wID0gYXdhaXQgYXhpb3MuZ2V0KCcvbWUnKVxuICAgICAgICBzZXREYXRhKHRlbXAuZGF0YS5kaXNwbGF5X25hbWUpXG4gICAgfSxbXSlcblxuICAgIHVzZUVmZmVjdChhc3luYyAoKSA9PiB7XG4gICAgICAgIGlmKHByb3BzLnBsYXlsaXN0SWQgIT09ICcnKXtcbiAgICAgICAgICAgIGNvbnN0IHBsYXlsaXN0SW5mbyA9IGF3YWl0IGF4aW9zLmdldChgL3BsYXlsaXN0cy8ke3Byb3BzLnBsYXlsaXN0SWR9YClcbiAgICAgICAgICAgIHNldFBsYXlsaXN0KHBsYXlsaXN0SW5mbylcbiAgICAgICAgfVxuICAgIH0sW3Byb3BzLnBsYXlsaXN0SWRdKVxuXG4gICAgcmV0dXJuKFxuICAgICAgICA8Qm94IGhlaWdodD17XCIxMDAlXCJ9IHdpZHRoPXtcIjEwMCVcIn0gYm9yZGVyU3R5bGU9J3NpbmdsZScgZmxleERpcmVjdGlvbj0nY29sdW1uJyBhbGlnbkl0ZW1zPSdjZW50ZXInIGp1c3RpZnlDb250ZW50PSdjZW50ZXInIHBhZGRpbmc9ezJ9PlxuICAgICAgICAgICAgPEJpZ1RleHRcbiAgICAgICAgICAgICAgdGV4dD0ge3BsYXlsaXN0ID8gcGxheWxpc3QuZGF0YS5uYW1lIDogJ1BsYXlsaXN0IE5hbWUnfVxuICAgICAgICAgICAgICBmb250PSd0aW55J1xuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxUcmFja3MgdHJhY2tzPXtwbGF5bGlzdCA/IHBsYXlsaXN0LmRhdGEgOiAnJ30vPlxuXG4gICAgICAgIDwvQm94PlxuICAgIClcbn1cblxuY29uc3QgVHJhY2tzID0gKHByb3BzKSA9PntcbmlmKHByb3BzLnRyYWNrcyAhPT0gJycpe1xuICAgIGNvbnNvbGUubG9nKHByb3BzLnRyYWNrcy5pdGVtc1swXSlcbn1cblxuICAgIHJldHVybihcbiAgICAgICAgPFRleHQ+cGxhY2Vob2xkZXI8L1RleHQ+XG4gICAgKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE1haW5WaWV3O1xuXG4iXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQU8sQ0FBQztBQUM5QixNQUFNO0VBQUVDLFFBQVE7RUFBRUM7QUFBVSxDQUFDLEdBQUdILEtBQUs7QUFDckMsTUFBTTtFQUFFSSxHQUFHO0VBQUVDLElBQUk7RUFBRUM7QUFBUSxDQUFDLEdBQUdMLE9BQU8sQ0FBQyxLQUFLLENBQUM7QUFDN0MsTUFBTU0sT0FBTyxHQUFHTixPQUFPLENBQUMsY0FBYyxDQUFDO0FBQ3ZDLE1BQU1PLFFBQVEsR0FBR1AsT0FBTyxDQUFDLGNBQWMsQ0FBQztBQUN4QyxNQUFNUSxLQUFLLEdBQUdSLE9BQU8sQ0FBQyxPQUFPLENBQUM7O0FBRzlCOztBQUVBLE1BQU1TLFFBQVEsR0FBSUMsS0FBSyxJQUFJO0VBRXZCLE1BQU0sQ0FBQ0MsSUFBSSxFQUFDQyxPQUFPLENBQUMsR0FBR1gsUUFBUSxDQUFDLEVBQUUsQ0FBQztFQUNuQyxNQUFNLENBQUNZLFFBQVEsRUFBQ0MsV0FBVyxDQUFDLEdBQUdiLFFBQVEsQ0FBQyxJQUFJLENBQUM7RUFFN0NDLFNBQVMsQ0FBQyxZQUFZO0lBQ2xCLE1BQU1hLElBQUksR0FBRyxNQUFNUCxLQUFLLENBQUNRLEdBQUcsQ0FBQyxLQUFLLENBQUM7SUFDbkNKLE9BQU8sQ0FBQ0csSUFBSSxDQUFDSixJQUFJLENBQUNNLFlBQVksQ0FBQztFQUNuQyxDQUFDLEVBQUMsRUFBRSxDQUFDO0VBRUxmLFNBQVMsQ0FBQyxZQUFZO0lBQ2xCLElBQUdRLEtBQUssQ0FBQ1EsVUFBVSxLQUFLLEVBQUUsRUFBQztNQUN2QixNQUFNQyxZQUFZLEdBQUcsTUFBTVgsS0FBSyxDQUFDUSxHQUFHLENBQUUsY0FBYU4sS0FBSyxDQUFDUSxVQUFXLEVBQUMsQ0FBQztNQUN0RUosV0FBVyxDQUFDSyxZQUFZLENBQUM7SUFDN0I7RUFDSixDQUFDLEVBQUMsQ0FBQ1QsS0FBSyxDQUFDUSxVQUFVLENBQUMsQ0FBQztFQUVyQixvQkFDSSxvQkFBQyxHQUFHO0lBQUMsTUFBTSxFQUFFLE1BQU87SUFBQyxLQUFLLEVBQUUsTUFBTztJQUFDLFdBQVcsRUFBQyxRQUFRO0lBQUMsYUFBYSxFQUFDLFFBQVE7SUFBQyxVQUFVLEVBQUMsUUFBUTtJQUFDLGNBQWMsRUFBQyxRQUFRO0lBQUMsT0FBTyxFQUFFO0VBQUUsZ0JBQ25JLG9CQUFDLE9BQU87SUFDTixJQUFJLEVBQUdMLFFBQVEsR0FBR0EsUUFBUSxDQUFDRixJQUFJLENBQUNTLElBQUksR0FBRyxlQUFnQjtJQUN2RCxJQUFJLEVBQUM7RUFBTSxFQUNYLGVBQ0Ysb0JBQUMsTUFBTTtJQUFDLE1BQU0sRUFBRVAsUUFBUSxHQUFHQSxRQUFRLENBQUNGLElBQUksR0FBRztFQUFHLEVBQUUsQ0FFOUM7QUFFZCxDQUFDO0FBRUQsTUFBTVUsTUFBTSxHQUFJWCxLQUFLLElBQUk7RUFDekIsSUFBR0EsS0FBSyxDQUFDWSxNQUFNLEtBQUssRUFBRSxFQUFDO0lBQ25CQyxPQUFPLENBQUNDLEdBQUcsQ0FBQ2QsS0FBSyxDQUFDWSxNQUFNLENBQUNHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUN0QztFQUVJLG9CQUNJLG9CQUFDLElBQUksc0JBQW1CO0FBRWhDLENBQUM7QUFFREMsTUFBTSxDQUFDQyxPQUFPLEdBQUdsQixRQUFRIn0=