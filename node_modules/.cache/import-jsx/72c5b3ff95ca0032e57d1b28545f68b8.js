// Table.js

const React = require('react');
const {
  useState,
  useEffect
} = React;
// Destructuring useState and useEffect from React

const {
  Box,
  Text,
  Newline
} = require('ink');
// Destructuring the components we need from ink

const cryptoData = require('../data.json');
// Fetching mock data

const Table = () => {
  const [data, setData] = useState([]);
  useEffect(() => {
    setData(cryptoData);
  });
  return /*#__PURE__*/React.createElement(Box, {
    borderStyle: "single",
    padding: 2,
    flexDirection: "column"
  }, /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Box, {
    width: "25%"
  }, /*#__PURE__*/React.createElement(Text, null, "COIN")), /*#__PURE__*/React.createElement(Box, {
    width: "25%"
  }, /*#__PURE__*/React.createElement(Text, null, "PRICE (USD)")), /*#__PURE__*/React.createElement(Box, {
    width: "25%"
  }, /*#__PURE__*/React.createElement(Text, null, "24 HOUR CHANGE")), /*#__PURE__*/React.createElement(Box, {
    width: "25%"
  }, /*#__PURE__*/React.createElement(Text, null, "ALL TIME HIGH"))), /*#__PURE__*/React.createElement(Newline, null), data.map(({
    id,
    name,
    current_price,
    price_change_percentage_24h,
    ath
  }) => /*#__PURE__*/React.createElement(Box, {
    key: id
  }, /*#__PURE__*/React.createElement(Box, {
    width: "25%"
  }, /*#__PURE__*/React.createElement(Text, null, name)), /*#__PURE__*/React.createElement(Box, {
    width: "25%"
  }, /*#__PURE__*/React.createElement(Text, null, current_price)), /*#__PURE__*/React.createElement(Box, {
    width: "25%"
  }, /*#__PURE__*/React.createElement(Text, null, price_change_percentage_24h)), /*#__PURE__*/React.createElement(Box, {
    width: "25%"
  }, /*#__PURE__*/React.createElement(Text, null, ath)))));
};
module.exports = Table;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsIkJveCIsIlRleHQiLCJOZXdsaW5lIiwiY3J5cHRvRGF0YSIsIlRhYmxlIiwiZGF0YSIsInNldERhdGEiLCJtYXAiLCJpZCIsIm5hbWUiLCJjdXJyZW50X3ByaWNlIiwicHJpY2VfY2hhbmdlX3BlcmNlbnRhZ2VfMjRoIiwiYXRoIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbInVpLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRhYmxlLmpzXG5cbmNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxuY29uc3QgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gPSBSZWFjdDtcbi8vIERlc3RydWN0dXJpbmcgdXNlU3RhdGUgYW5kIHVzZUVmZmVjdCBmcm9tIFJlYWN0XG5cbmNvbnN0IHsgQm94LCBUZXh0LCBOZXdsaW5lIH0gPSByZXF1aXJlKCdpbmsnKTtcbi8vIERlc3RydWN0dXJpbmcgdGhlIGNvbXBvbmVudHMgd2UgbmVlZCBmcm9tIGlua1xuXG5jb25zdCBjcnlwdG9EYXRhID0gcmVxdWlyZSgnLi4vZGF0YS5qc29uJyk7XG4vLyBGZXRjaGluZyBtb2NrIGRhdGFcblxuY29uc3QgVGFibGUgPSAoKSA9PiB7XG5cbiAgICBjb25zdCBbZGF0YSwgc2V0RGF0YV0gPSB1c2VTdGF0ZShbXSk7XG5cbiAgICB1c2VFZmZlY3QoKCk9PntcbiAgICAgICAgc2V0RGF0YShjcnlwdG9EYXRhKTtcbiAgICB9KTtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxCb3ggYm9yZGVyU3R5bGU9J3NpbmdsZScgcGFkZGluZz17Mn0gZmxleERpcmVjdGlvbj0nY29sdW1uJz5cbiAgICAgICAgICAgIDxCb3g+XG4gICAgICAgICAgICAgICAgPEJveCB3aWR0aD0nMjUlJz48VGV4dD5DT0lOPC9UZXh0PjwvQm94PlxuICAgICAgICAgICAgICAgIDxCb3ggd2lkdGg9JzI1JSc+PFRleHQ+UFJJQ0UgKFVTRCk8L1RleHQ+PC9Cb3g+XG4gICAgICAgICAgICAgICAgPEJveCB3aWR0aD0nMjUlJz48VGV4dD4yNCBIT1VSIENIQU5HRTwvVGV4dD48L0JveD5cbiAgICAgICAgICAgICAgICA8Qm94IHdpZHRoPScyNSUnPjxUZXh0PkFMTCBUSU1FIEhJR0g8L1RleHQ+PC9Cb3g+XG4gICAgICAgICAgICA8L0JveD5cbiAgICAgICAgICAgIDxOZXdsaW5lLz5cbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBkYXRhLm1hcCgoe2lkLCBuYW1lLCBjdXJyZW50X3ByaWNlLCBwcmljZV9jaGFuZ2VfcGVyY2VudGFnZV8yNGgsIGF0aH0pID0+IChcbiAgICAgICAgICAgICAgICAgICAgPEJveCBrZXk9e2lkfT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxCb3ggd2lkdGg9JzI1JSc+PFRleHQ+e25hbWV9PC9UZXh0PjwvQm94PlxuICAgICAgICAgICAgICAgICAgICAgICAgPEJveCB3aWR0aD0nMjUlJz48VGV4dD57Y3VycmVudF9wcmljZX08L1RleHQ+PC9Cb3g+XG4gICAgICAgICAgICAgICAgICAgICAgICA8Qm94IHdpZHRoPScyNSUnPjxUZXh0PntwcmljZV9jaGFuZ2VfcGVyY2VudGFnZV8yNGh9PC9UZXh0PjwvQm94PlxuICAgICAgICAgICAgICAgICAgICAgICAgPEJveCB3aWR0aD0nMjUlJz48VGV4dD57YXRofTwvVGV4dD48L0JveD5cbiAgICAgICAgICAgICAgICAgICAgPC9Cb3g+XG4gICAgICAgICAgICAgICAgKSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgPC9Cb3g+XG4gICAgKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFRhYmxlOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBTyxDQUFDO0FBRTlCLE1BQU07RUFBRUMsUUFBUTtFQUFFQztBQUFVLENBQUMsR0FBR0gsS0FBSztBQUNyQzs7QUFFQSxNQUFNO0VBQUVJLEdBQUc7RUFBRUMsSUFBSTtFQUFFQztBQUFRLENBQUMsR0FBR0wsT0FBTyxDQUFDLEtBQUssQ0FBQztBQUM3Qzs7QUFFQSxNQUFNTSxVQUFVLEdBQUdOLE9BQU8sQ0FBQyxjQUFjLENBQUM7QUFDMUM7O0FBRUEsTUFBTU8sS0FBSyxHQUFHLE1BQU07RUFFaEIsTUFBTSxDQUFDQyxJQUFJLEVBQUVDLE9BQU8sQ0FBQyxHQUFHUixRQUFRLENBQUMsRUFBRSxDQUFDO0VBRXBDQyxTQUFTLENBQUMsTUFBSTtJQUNWTyxPQUFPLENBQUNILFVBQVUsQ0FBQztFQUN2QixDQUFDLENBQUM7RUFFRixvQkFDSSxvQkFBQyxHQUFHO0lBQUMsV0FBVyxFQUFDLFFBQVE7SUFBQyxPQUFPLEVBQUUsQ0FBRTtJQUFDLGFBQWEsRUFBQztFQUFRLGdCQUN4RCxvQkFBQyxHQUFHLHFCQUNBLG9CQUFDLEdBQUc7SUFBQyxLQUFLLEVBQUM7RUFBSyxnQkFBQyxvQkFBQyxJQUFJLGVBQVksQ0FBTSxlQUN4QyxvQkFBQyxHQUFHO0lBQUMsS0FBSyxFQUFDO0VBQUssZ0JBQUMsb0JBQUMsSUFBSSxzQkFBbUIsQ0FBTSxlQUMvQyxvQkFBQyxHQUFHO0lBQUMsS0FBSyxFQUFDO0VBQUssZ0JBQUMsb0JBQUMsSUFBSSx5QkFBc0IsQ0FBTSxlQUNsRCxvQkFBQyxHQUFHO0lBQUMsS0FBSyxFQUFDO0VBQUssZ0JBQUMsb0JBQUMsSUFBSSx3QkFBcUIsQ0FBTSxDQUMvQyxlQUNOLG9CQUFDLE9BQU8sT0FBRSxFQUVORSxJQUFJLENBQUNFLEdBQUcsQ0FBQyxDQUFDO0lBQUNDLEVBQUU7SUFBRUMsSUFBSTtJQUFFQyxhQUFhO0lBQUVDLDJCQUEyQjtJQUFFQztFQUFHLENBQUMsa0JBQ2pFLG9CQUFDLEdBQUc7SUFBQyxHQUFHLEVBQUVKO0VBQUcsZ0JBQ1Qsb0JBQUMsR0FBRztJQUFDLEtBQUssRUFBQztFQUFLLGdCQUFDLG9CQUFDLElBQUksUUFBRUMsSUFBSSxDQUFRLENBQU0sZUFDMUMsb0JBQUMsR0FBRztJQUFDLEtBQUssRUFBQztFQUFLLGdCQUFDLG9CQUFDLElBQUksUUFBRUMsYUFBYSxDQUFRLENBQU0sZUFDbkQsb0JBQUMsR0FBRztJQUFDLEtBQUssRUFBQztFQUFLLGdCQUFDLG9CQUFDLElBQUksUUFBRUMsMkJBQTJCLENBQVEsQ0FBTSxlQUNqRSxvQkFBQyxHQUFHO0lBQUMsS0FBSyxFQUFDO0VBQUssZ0JBQUMsb0JBQUMsSUFBSSxRQUFFQyxHQUFHLENBQVEsQ0FBTSxDQUVoRCxDQUFDLENBRUo7QUFFZCxDQUFDO0FBRURDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHVixLQUFLIn0=