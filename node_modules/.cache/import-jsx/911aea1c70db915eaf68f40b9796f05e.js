const React = require('react');
const {
  useState,
  useEffect
} = React;
const {
  Box,
  Text,
  Newline
} = require('ink');
const BigText = require('ink-big-text');
const Gradient = require('ink-gradient');
const axios = require('axios');

// Spotify client required parameters

const MainView = props => {
  const [data, setData] = useState('');
  const [playlist, setPlaylist] = useState(null);
  useEffect(async () => {
    const temp = await axios.get('/me');
    setData(temp.data.display_name);
  }, []);
  useEffect(async () => {
    if (props.playlistId !== '') {
      const playlistInfo = await axios.get(`/playlists/${props.playlistId}`);
      setPlaylist(playlistInfo);
    }
  }, [props.playlistId]);
  return /*#__PURE__*/React.createElement(Box, {
    height: "100%",
    width: "100%",
    borderStyle: "single",
    flexDirection: "column",
    alignItems: "center",
    justifyContent: "center",
    padding: 2
  }, /*#__PURE__*/React.createElement(BigText, {
    text: playlist ? playlist.data.name : 'Playlist Name',
    font: "tiny"
  }), /*#__PURE__*/React.createElement(Tracks, {
    id: playlist ? props.playlistId : ''
  }));
};
const Tracks = props => {
  const [tracks, setTracks] = useState([]);
  useEffect(async () => {
    if (props.id !== '') {
      const temp = await axios.get(`/playlists/${props.id}/tracks`);
      setTracks(temp.data.items.map(item => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Text, {
        key: item.track.name
      }, item.track.name), /*#__PURE__*/React.createElement(Newline, null))));
    }
  }, [props.id]);
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: "column",
    height: "30%",
    width: "100%",
    borderStyle: "single"
  }, props.id ? tracks : /*#__PURE__*/React.createElement(Text, null, "no tracks"));
};
module.exports = MainView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsIkJveCIsIlRleHQiLCJOZXdsaW5lIiwiQmlnVGV4dCIsIkdyYWRpZW50IiwiYXhpb3MiLCJNYWluVmlldyIsInByb3BzIiwiZGF0YSIsInNldERhdGEiLCJwbGF5bGlzdCIsInNldFBsYXlsaXN0IiwidGVtcCIsImdldCIsImRpc3BsYXlfbmFtZSIsInBsYXlsaXN0SWQiLCJwbGF5bGlzdEluZm8iLCJuYW1lIiwiVHJhY2tzIiwidHJhY2tzIiwic2V0VHJhY2tzIiwiaWQiLCJpdGVtcyIsIm1hcCIsIml0ZW0iLCJ0cmFjayIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJNYWluVmlldy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSA9IFJlYWN0O1xuY29uc3QgeyBCb3gsIFRleHQsIE5ld2xpbmUgfSA9IHJlcXVpcmUoJ2luaycpO1xuY29uc3QgQmlnVGV4dCA9IHJlcXVpcmUoJ2luay1iaWctdGV4dCcpO1xuY29uc3QgR3JhZGllbnQgPSByZXF1aXJlKCdpbmstZ3JhZGllbnQnKVxuY29uc3QgYXhpb3MgPSByZXF1aXJlKCdheGlvcycpXG5cblxuLy8gU3BvdGlmeSBjbGllbnQgcmVxdWlyZWQgcGFyYW1ldGVyc1xuXG5jb25zdCBNYWluVmlldyA9IChwcm9wcykgPT57XG5cbiAgICBjb25zdCBbZGF0YSxzZXREYXRhXSA9IHVzZVN0YXRlKCcnKVxuICAgIGNvbnN0IFtwbGF5bGlzdCxzZXRQbGF5bGlzdF0gPSB1c2VTdGF0ZShudWxsKVxuXG4gICAgdXNlRWZmZWN0KGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgdGVtcCA9IGF3YWl0IGF4aW9zLmdldCgnL21lJylcbiAgICAgICAgc2V0RGF0YSh0ZW1wLmRhdGEuZGlzcGxheV9uYW1lKVxuICAgIH0sW10pXG5cbiAgICB1c2VFZmZlY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgICBpZihwcm9wcy5wbGF5bGlzdElkICE9PSAnJyl7XG4gICAgICAgICAgICBjb25zdCBwbGF5bGlzdEluZm8gPSBhd2FpdCBheGlvcy5nZXQoYC9wbGF5bGlzdHMvJHtwcm9wcy5wbGF5bGlzdElkfWApXG4gICAgICAgICAgICBzZXRQbGF5bGlzdChwbGF5bGlzdEluZm8pXG4gICAgICAgIH1cbiAgICB9LFtwcm9wcy5wbGF5bGlzdElkXSlcblxuICAgIHJldHVybihcbiAgICAgICAgPEJveCBoZWlnaHQ9e1wiMTAwJVwifSB3aWR0aD17XCIxMDAlXCJ9IGJvcmRlclN0eWxlPSdzaW5nbGUnIGZsZXhEaXJlY3Rpb249J2NvbHVtbicgYWxpZ25JdGVtcz0nY2VudGVyJyBqdXN0aWZ5Q29udGVudD0nY2VudGVyJyBwYWRkaW5nPXsyfT5cbiAgICAgICAgICAgIDxCaWdUZXh0XG4gICAgICAgICAgICAgIHRleHQ9IHtwbGF5bGlzdCA/IHBsYXlsaXN0LmRhdGEubmFtZSA6ICdQbGF5bGlzdCBOYW1lJ31cbiAgICAgICAgICAgICAgZm9udD0ndGlueSdcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8VHJhY2tzIGlkPXtwbGF5bGlzdCA/IHByb3BzLnBsYXlsaXN0SWQgOiAnJ30vPlxuXG4gICAgICAgIDwvQm94PlxuICAgIClcbn1cblxuY29uc3QgVHJhY2tzID0gKHByb3BzKSA9PntcbiAgICBjb25zdCBbdHJhY2tzLHNldFRyYWNrc10gPSB1c2VTdGF0ZShbXSlcbiAgICBcbiAgICB1c2VFZmZlY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgICBpZihwcm9wcy5pZCAhPT0gJycpe1xuICAgICAgICAgICAgY29uc3QgdGVtcCA9IGF3YWl0IGF4aW9zLmdldChgL3BsYXlsaXN0cy8ke3Byb3BzLmlkfS90cmFja3NgKVxuICAgICAgICAgICAgc2V0VHJhY2tzKHRlbXAuZGF0YS5pdGVtcy5tYXAoKGl0ZW0pID0+XG4gICAgICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgICAgICAgPFRleHQga2V5PXtpdGVtLnRyYWNrLm5hbWV9PntpdGVtLnRyYWNrLm5hbWV9PC9UZXh0PlxuICAgICAgICAgICAgICAgICAgICA8TmV3bGluZSAvPlxuICAgICAgICAgICAgICAgIDwvPlxuICAgICAgICAgICAgKSlcbiAgICAgICAgfVxuICAgIH0sW3Byb3BzLmlkXSlcblxuXG4gICAgcmV0dXJuKFxuICAgICAgICA8Qm94IGZsZXhEaXJlY3Rpb249J2NvbHVtbicgaGVpZ2h0PXtcIjMwJVwifSB3aWR0aD17XCIxMDAlXCJ9IGJvcmRlclN0eWxlPSdzaW5nbGUnPntwcm9wcy5pZCA/IHRyYWNrcyA6IDxUZXh0Pm5vIHRyYWNrczwvVGV4dD59PC9Cb3g+XG4gICAgKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE1haW5WaWV3O1xuXG4iXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQU8sQ0FBQztBQUM5QixNQUFNO0VBQUVDLFFBQVE7RUFBRUM7QUFBVSxDQUFDLEdBQUdILEtBQUs7QUFDckMsTUFBTTtFQUFFSSxHQUFHO0VBQUVDLElBQUk7RUFBRUM7QUFBUSxDQUFDLEdBQUdMLE9BQU8sQ0FBQyxLQUFLLENBQUM7QUFDN0MsTUFBTU0sT0FBTyxHQUFHTixPQUFPLENBQUMsY0FBYyxDQUFDO0FBQ3ZDLE1BQU1PLFFBQVEsR0FBR1AsT0FBTyxDQUFDLGNBQWMsQ0FBQztBQUN4QyxNQUFNUSxLQUFLLEdBQUdSLE9BQU8sQ0FBQyxPQUFPLENBQUM7O0FBRzlCOztBQUVBLE1BQU1TLFFBQVEsR0FBSUMsS0FBSyxJQUFJO0VBRXZCLE1BQU0sQ0FBQ0MsSUFBSSxFQUFDQyxPQUFPLENBQUMsR0FBR1gsUUFBUSxDQUFDLEVBQUUsQ0FBQztFQUNuQyxNQUFNLENBQUNZLFFBQVEsRUFBQ0MsV0FBVyxDQUFDLEdBQUdiLFFBQVEsQ0FBQyxJQUFJLENBQUM7RUFFN0NDLFNBQVMsQ0FBQyxZQUFZO0lBQ2xCLE1BQU1hLElBQUksR0FBRyxNQUFNUCxLQUFLLENBQUNRLEdBQUcsQ0FBQyxLQUFLLENBQUM7SUFDbkNKLE9BQU8sQ0FBQ0csSUFBSSxDQUFDSixJQUFJLENBQUNNLFlBQVksQ0FBQztFQUNuQyxDQUFDLEVBQUMsRUFBRSxDQUFDO0VBRUxmLFNBQVMsQ0FBQyxZQUFZO0lBQ2xCLElBQUdRLEtBQUssQ0FBQ1EsVUFBVSxLQUFLLEVBQUUsRUFBQztNQUN2QixNQUFNQyxZQUFZLEdBQUcsTUFBTVgsS0FBSyxDQUFDUSxHQUFHLENBQUUsY0FBYU4sS0FBSyxDQUFDUSxVQUFXLEVBQUMsQ0FBQztNQUN0RUosV0FBVyxDQUFDSyxZQUFZLENBQUM7SUFDN0I7RUFDSixDQUFDLEVBQUMsQ0FBQ1QsS0FBSyxDQUFDUSxVQUFVLENBQUMsQ0FBQztFQUVyQixvQkFDSSxvQkFBQyxHQUFHO0lBQUMsTUFBTSxFQUFFLE1BQU87SUFBQyxLQUFLLEVBQUUsTUFBTztJQUFDLFdBQVcsRUFBQyxRQUFRO0lBQUMsYUFBYSxFQUFDLFFBQVE7SUFBQyxVQUFVLEVBQUMsUUFBUTtJQUFDLGNBQWMsRUFBQyxRQUFRO0lBQUMsT0FBTyxFQUFFO0VBQUUsZ0JBQ25JLG9CQUFDLE9BQU87SUFDTixJQUFJLEVBQUdMLFFBQVEsR0FBR0EsUUFBUSxDQUFDRixJQUFJLENBQUNTLElBQUksR0FBRyxlQUFnQjtJQUN2RCxJQUFJLEVBQUM7RUFBTSxFQUNYLGVBQ0Ysb0JBQUMsTUFBTTtJQUFDLEVBQUUsRUFBRVAsUUFBUSxHQUFHSCxLQUFLLENBQUNRLFVBQVUsR0FBRztFQUFHLEVBQUUsQ0FFN0M7QUFFZCxDQUFDO0FBRUQsTUFBTUcsTUFBTSxHQUFJWCxLQUFLLElBQUk7RUFDckIsTUFBTSxDQUFDWSxNQUFNLEVBQUNDLFNBQVMsQ0FBQyxHQUFHdEIsUUFBUSxDQUFDLEVBQUUsQ0FBQztFQUV2Q0MsU0FBUyxDQUFDLFlBQVk7SUFDbEIsSUFBR1EsS0FBSyxDQUFDYyxFQUFFLEtBQUssRUFBRSxFQUFDO01BQ2YsTUFBTVQsSUFBSSxHQUFHLE1BQU1QLEtBQUssQ0FBQ1EsR0FBRyxDQUFFLGNBQWFOLEtBQUssQ0FBQ2MsRUFBRyxTQUFRLENBQUM7TUFDN0RELFNBQVMsQ0FBQ1IsSUFBSSxDQUFDSixJQUFJLENBQUNjLEtBQUssQ0FBQ0MsR0FBRyxDQUFFQyxJQUFJLGlCQUMvQix1REFDSSxvQkFBQyxJQUFJO1FBQUMsR0FBRyxFQUFFQSxJQUFJLENBQUNDLEtBQUssQ0FBQ1I7TUFBSyxHQUFFTyxJQUFJLENBQUNDLEtBQUssQ0FBQ1IsSUFBSSxDQUFRLGVBQ3BELG9CQUFDLE9BQU8sT0FBRyxDQUNaLENBQ04sQ0FBQztJQUNOO0VBQ0osQ0FBQyxFQUFDLENBQUNWLEtBQUssQ0FBQ2MsRUFBRSxDQUFDLENBQUM7RUFHYixvQkFDSSxvQkFBQyxHQUFHO0lBQUMsYUFBYSxFQUFDLFFBQVE7SUFBQyxNQUFNLEVBQUUsS0FBTTtJQUFDLEtBQUssRUFBRSxNQUFPO0lBQUMsV0FBVyxFQUFDO0VBQVEsR0FBRWQsS0FBSyxDQUFDYyxFQUFFLEdBQUdGLE1BQU0sZ0JBQUcsb0JBQUMsSUFBSSxvQkFBaUIsQ0FBTztBQUV6SSxDQUFDO0FBRURPLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHckIsUUFBUSJ9