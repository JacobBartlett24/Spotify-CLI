const React = require('react');
const {
  useState,
  useEffect
} = React;
const {
  Box,
  Text,
  Newline,
  useFocus
} = require('ink');
const BigText = require('ink-big-text');
const Gradient = require('ink-gradient');
const axios = require('axios');

// Spotify client required parameters

const PlaylistInfo = props => {
  const [data, setData] = useState('');
  const [playlist, setPlaylist] = useState(null);
  useEffect(async () => {
    const temp = await axios.get('/me');
    setData(temp.data.display_name);
  }, []);
  useEffect(async () => {
    if (props.playlistId !== '') {
      const playlistInfo = await axios.get(`/playlists/${props.playlistId}`);
      setPlaylist(playlistInfo);
    }
  }, [props.playlistId]);
  return /*#__PURE__*/React.createElement(Box, {
    height: "100%",
    width: "100%",
    borderStyle: "single",
    flexDirection: "column",
    alignItems: "center",
    justifyContent: "center",
    padding: 2
  }, /*#__PURE__*/React.createElement(BigText, {
    height: "20%",
    text: playlist ? playlist.data.name : 'Playlist Name',
    font: "tiny"
  }), /*#__PURE__*/React.createElement(Tracks, {
    id: playlist ? props.playlistId : ''
  }));
};
const Tracks = props => {
  const [tracks, setTracks] = useState([]);
  const {
    isFocused
  } = useFocus();
  useEffect(async () => {
    if (props.id !== '') {
      const temp = await axios.get(`/playlists/${props.id}/tracks`);
      setTracks(temp.data.items.map((item, i) => /*#__PURE__*/React.createElement(Box, {
        key: i
      }, /*#__PURE__*/React.createElement(Text, {
        color: isFocused ? 'green' : 'white'
      }, item.track.name), /*#__PURE__*/React.createElement(Newline, null))));
    }
  }, [props.id]);
  return /*#__PURE__*/React.createElement(Box, {
    key: props.id,
    flexDirection: "column",
    height: "80%",
    width: "100%"
  }, props.id ? tracks : /*#__PURE__*/React.createElement(Text, null, "no tracks"));
};
module.exports = PlaylistInfo;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsIkJveCIsIlRleHQiLCJOZXdsaW5lIiwidXNlRm9jdXMiLCJCaWdUZXh0IiwiR3JhZGllbnQiLCJheGlvcyIsIlBsYXlsaXN0SW5mbyIsInByb3BzIiwiZGF0YSIsInNldERhdGEiLCJwbGF5bGlzdCIsInNldFBsYXlsaXN0IiwidGVtcCIsImdldCIsImRpc3BsYXlfbmFtZSIsInBsYXlsaXN0SWQiLCJwbGF5bGlzdEluZm8iLCJuYW1lIiwiVHJhY2tzIiwidHJhY2tzIiwic2V0VHJhY2tzIiwiaXNGb2N1c2VkIiwiaWQiLCJpdGVtcyIsIm1hcCIsIml0ZW0iLCJpIiwidHJhY2siLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiUGxheWxpc3RJbmZvLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9ID0gUmVhY3Q7XG5jb25zdCB7IEJveCwgVGV4dCwgTmV3bGluZSwgdXNlRm9jdXMgfSA9IHJlcXVpcmUoJ2luaycpO1xuY29uc3QgQmlnVGV4dCA9IHJlcXVpcmUoJ2luay1iaWctdGV4dCcpO1xuY29uc3QgR3JhZGllbnQgPSByZXF1aXJlKCdpbmstZ3JhZGllbnQnKVxuY29uc3QgYXhpb3MgPSByZXF1aXJlKCdheGlvcycpXG5cblxuLy8gU3BvdGlmeSBjbGllbnQgcmVxdWlyZWQgcGFyYW1ldGVyc1xuXG5jb25zdCBQbGF5bGlzdEluZm8gPSAocHJvcHMpID0+e1xuXG4gICAgY29uc3QgW2RhdGEsc2V0RGF0YV0gPSB1c2VTdGF0ZSgnJylcbiAgICBjb25zdCBbcGxheWxpc3Qsc2V0UGxheWxpc3RdID0gdXNlU3RhdGUobnVsbClcblxuICAgIHVzZUVmZmVjdChhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHRlbXAgPSBhd2FpdCBheGlvcy5nZXQoJy9tZScpXG4gICAgICAgIHNldERhdGEodGVtcC5kYXRhLmRpc3BsYXlfbmFtZSlcbiAgICB9LFtdKVxuXG4gICAgdXNlRWZmZWN0KGFzeW5jICgpID0+IHtcbiAgICAgICAgaWYocHJvcHMucGxheWxpc3RJZCAhPT0gJycpe1xuICAgICAgICAgICAgY29uc3QgcGxheWxpc3RJbmZvID0gYXdhaXQgYXhpb3MuZ2V0KGAvcGxheWxpc3RzLyR7cHJvcHMucGxheWxpc3RJZH1gKVxuICAgICAgICAgICAgc2V0UGxheWxpc3QocGxheWxpc3RJbmZvKVxuICAgICAgICB9XG4gICAgfSxbcHJvcHMucGxheWxpc3RJZF0pXG5cbiAgICByZXR1cm4oXG4gICAgICAgIDxCb3ggaGVpZ2h0PXtcIjEwMCVcIn0gd2lkdGg9e1wiMTAwJVwifSBib3JkZXJTdHlsZT0nc2luZ2xlJyBmbGV4RGlyZWN0aW9uPSdjb2x1bW4nIGFsaWduSXRlbXM9J2NlbnRlcicganVzdGlmeUNvbnRlbnQ9J2NlbnRlcicgcGFkZGluZz17Mn0+XG4gICAgICAgICAgICA8QmlnVGV4dFxuICAgICAgICAgICAgICAgIGhlaWdodD17XCIyMCVcIn1cbiAgICAgICAgICAgICAgdGV4dD0ge3BsYXlsaXN0ID8gcGxheWxpc3QuZGF0YS5uYW1lIDogJ1BsYXlsaXN0IE5hbWUnfVxuICAgICAgICAgICAgICBmb250PSd0aW55J1xuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxUcmFja3MgaWQ9e3BsYXlsaXN0ID8gcHJvcHMucGxheWxpc3RJZCA6ICcnfS8+XG5cbiAgICAgICAgPC9Cb3g+XG4gICAgKVxufVxuXG5jb25zdCBUcmFja3MgPSAocHJvcHMpID0+e1xuICAgIGNvbnN0IFt0cmFja3Msc2V0VHJhY2tzXSA9IHVzZVN0YXRlKFtdKVxuICAgIGNvbnN0IHtpc0ZvY3VzZWR9ID0gdXNlRm9jdXMoKVxuXG4gICAgdXNlRWZmZWN0KGFzeW5jICgpID0+IHtcbiAgICAgICAgaWYocHJvcHMuaWQgIT09ICcnKXtcbiAgICAgICAgICAgIGNvbnN0IHRlbXAgPSBhd2FpdCBheGlvcy5nZXQoYC9wbGF5bGlzdHMvJHtwcm9wcy5pZH0vdHJhY2tzYClcbiAgICAgICAgICAgIHNldFRyYWNrcyh0ZW1wLmRhdGEuaXRlbXMubWFwKChpdGVtLGkpID0+XG4gICAgICAgICAgICAgICAgPEJveCBrZXk9e2l9PlxuICAgICAgICAgICAgICAgICAgICA8VGV4dCBjb2xvcj17aXNGb2N1c2VkID8gJ2dyZWVuJyA6ICd3aGl0ZSd9PntpdGVtLnRyYWNrLm5hbWV9PC9UZXh0PlxuICAgICAgICAgICAgICAgICAgICA8TmV3bGluZSAvPlxuICAgICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgKSlcbiAgICAgICAgfVxuICAgIH0sW3Byb3BzLmlkXSlcblxuXG4gICAgcmV0dXJuKFxuICAgICAgICA8Qm94IGtleT17cHJvcHMuaWR9ZmxleERpcmVjdGlvbj0nY29sdW1uJyBoZWlnaHQ9e1wiODAlXCJ9IHdpZHRoPXtcIjEwMCVcIn0+e3Byb3BzLmlkID8gdHJhY2tzIDogPFRleHQ+bm8gdHJhY2tzPC9UZXh0Pn08L0JveD5cbiAgICApXG59XG5cbm1vZHVsZS5leHBvcnRzID0gUGxheWxpc3RJbmZvO1xuXG4iXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQU8sQ0FBQztBQUM5QixNQUFNO0VBQUVDLFFBQVE7RUFBRUM7QUFBVSxDQUFDLEdBQUdILEtBQUs7QUFDckMsTUFBTTtFQUFFSSxHQUFHO0VBQUVDLElBQUk7RUFBRUMsT0FBTztFQUFFQztBQUFTLENBQUMsR0FBR04sT0FBTyxDQUFDLEtBQUssQ0FBQztBQUN2RCxNQUFNTyxPQUFPLEdBQUdQLE9BQU8sQ0FBQyxjQUFjLENBQUM7QUFDdkMsTUFBTVEsUUFBUSxHQUFHUixPQUFPLENBQUMsY0FBYyxDQUFDO0FBQ3hDLE1BQU1TLEtBQUssR0FBR1QsT0FBTyxDQUFDLE9BQU8sQ0FBQzs7QUFHOUI7O0FBRUEsTUFBTVUsWUFBWSxHQUFJQyxLQUFLLElBQUk7RUFFM0IsTUFBTSxDQUFDQyxJQUFJLEVBQUNDLE9BQU8sQ0FBQyxHQUFHWixRQUFRLENBQUMsRUFBRSxDQUFDO0VBQ25DLE1BQU0sQ0FBQ2EsUUFBUSxFQUFDQyxXQUFXLENBQUMsR0FBR2QsUUFBUSxDQUFDLElBQUksQ0FBQztFQUU3Q0MsU0FBUyxDQUFDLFlBQVk7SUFDbEIsTUFBTWMsSUFBSSxHQUFHLE1BQU1QLEtBQUssQ0FBQ1EsR0FBRyxDQUFDLEtBQUssQ0FBQztJQUNuQ0osT0FBTyxDQUFDRyxJQUFJLENBQUNKLElBQUksQ0FBQ00sWUFBWSxDQUFDO0VBQ25DLENBQUMsRUFBQyxFQUFFLENBQUM7RUFFTGhCLFNBQVMsQ0FBQyxZQUFZO0lBQ2xCLElBQUdTLEtBQUssQ0FBQ1EsVUFBVSxLQUFLLEVBQUUsRUFBQztNQUN2QixNQUFNQyxZQUFZLEdBQUcsTUFBTVgsS0FBSyxDQUFDUSxHQUFHLENBQUUsY0FBYU4sS0FBSyxDQUFDUSxVQUFXLEVBQUMsQ0FBQztNQUN0RUosV0FBVyxDQUFDSyxZQUFZLENBQUM7SUFDN0I7RUFDSixDQUFDLEVBQUMsQ0FBQ1QsS0FBSyxDQUFDUSxVQUFVLENBQUMsQ0FBQztFQUVyQixvQkFDSSxvQkFBQyxHQUFHO0lBQUMsTUFBTSxFQUFFLE1BQU87SUFBQyxLQUFLLEVBQUUsTUFBTztJQUFDLFdBQVcsRUFBQyxRQUFRO0lBQUMsYUFBYSxFQUFDLFFBQVE7SUFBQyxVQUFVLEVBQUMsUUFBUTtJQUFDLGNBQWMsRUFBQyxRQUFRO0lBQUMsT0FBTyxFQUFFO0VBQUUsZ0JBQ25JLG9CQUFDLE9BQU87SUFDSixNQUFNLEVBQUUsS0FBTTtJQUNoQixJQUFJLEVBQUdMLFFBQVEsR0FBR0EsUUFBUSxDQUFDRixJQUFJLENBQUNTLElBQUksR0FBRyxlQUFnQjtJQUN2RCxJQUFJLEVBQUM7RUFBTSxFQUNYLGVBQ0Ysb0JBQUMsTUFBTTtJQUFDLEVBQUUsRUFBRVAsUUFBUSxHQUFHSCxLQUFLLENBQUNRLFVBQVUsR0FBRztFQUFHLEVBQUUsQ0FFN0M7QUFFZCxDQUFDO0FBRUQsTUFBTUcsTUFBTSxHQUFJWCxLQUFLLElBQUk7RUFDckIsTUFBTSxDQUFDWSxNQUFNLEVBQUNDLFNBQVMsQ0FBQyxHQUFHdkIsUUFBUSxDQUFDLEVBQUUsQ0FBQztFQUN2QyxNQUFNO0lBQUN3QjtFQUFTLENBQUMsR0FBR25CLFFBQVEsRUFBRTtFQUU5QkosU0FBUyxDQUFDLFlBQVk7SUFDbEIsSUFBR1MsS0FBSyxDQUFDZSxFQUFFLEtBQUssRUFBRSxFQUFDO01BQ2YsTUFBTVYsSUFBSSxHQUFHLE1BQU1QLEtBQUssQ0FBQ1EsR0FBRyxDQUFFLGNBQWFOLEtBQUssQ0FBQ2UsRUFBRyxTQUFRLENBQUM7TUFDN0RGLFNBQVMsQ0FBQ1IsSUFBSSxDQUFDSixJQUFJLENBQUNlLEtBQUssQ0FBQ0MsR0FBRyxDQUFDLENBQUNDLElBQUksRUFBQ0MsQ0FBQyxrQkFDakMsb0JBQUMsR0FBRztRQUFDLEdBQUcsRUFBRUE7TUFBRSxnQkFDUixvQkFBQyxJQUFJO1FBQUMsS0FBSyxFQUFFTCxTQUFTLEdBQUcsT0FBTyxHQUFHO01BQVEsR0FBRUksSUFBSSxDQUFDRSxLQUFLLENBQUNWLElBQUksQ0FBUSxlQUNwRSxvQkFBQyxPQUFPLE9BQUcsQ0FDVCxDQUNULENBQUM7SUFDTjtFQUNKLENBQUMsRUFBQyxDQUFDVixLQUFLLENBQUNlLEVBQUUsQ0FBQyxDQUFDO0VBR2Isb0JBQ0ksb0JBQUMsR0FBRztJQUFDLEdBQUcsRUFBRWYsS0FBSyxDQUFDZSxFQUFHO0lBQUEsYUFBYSxFQUFDLFFBQVE7SUFBQyxNQUFNLEVBQUUsS0FBTTtJQUFDLEtBQUssRUFBRTtFQUFPLEdBQUVmLEtBQUssQ0FBQ2UsRUFBRSxHQUFHSCxNQUFNLGdCQUFHLG9CQUFDLElBQUksb0JBQWlCLENBQU87QUFFbEksQ0FBQztBQUVEUyxNQUFNLENBQUNDLE9BQU8sR0FBR3ZCLFlBQVkifQ==