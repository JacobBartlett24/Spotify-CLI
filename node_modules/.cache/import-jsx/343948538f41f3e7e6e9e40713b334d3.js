const React = require('react');
const {
  useState,
  useEffect
} = React;
const {
  Box,
  Text,
  Newline,
  useFocus
} = require('ink');
const BigText = require('ink-big-text');
const Gradient = require('ink-gradient');
const axios = require('axios');

// Spotify client required parameters

const PlaylistInfo = props => {
  const [data, setData] = useState('');
  const [playlist, setPlaylist] = useState(null);
  const [tracks, setTracks] = useState([]);
  const {
    isFocused
  } = useFocus();
  useEffect(async () => {
    if (playlist !== '' && props.playlistId != '') {
      const temp = await axios.get(`/playlists/${props.playlistId}/tracks`);
      setTracks(temp.data.items.map((item, i) => /*#__PURE__*/React.createElement(Track, {
        key: i,
        trackName: item.track.name
      })));
    }
  }, [playlist]);
  useEffect(async () => {
    const temp = await axios.get('/me');
    setData(temp.data.display_name);
  }, []);
  useEffect(async () => {
    if (props.playlistId !== '') {
      const playlistInfo = await axios.get(`/playlists/${props.playlistId}`);
      setPlaylist(playlistInfo);
    }
  }, [props.playlistId]);
  return /*#__PURE__*/React.createElement(Box, {
    height: "100%",
    width: "100%",
    borderStyle: "single",
    flexDirection: "column",
    alignItems: "center",
    justifyContent: "center",
    padding: 2
  }, /*#__PURE__*/React.createElement(BigText, {
    height: "20%",
    text: playlist ? playlist.data.name : 'Playlist Name',
    font: "tiny"
  }), tracks);
};
const Track = props => {
  const {
    isFocused
  } = useFocus();
  return /*#__PURE__*/React.createElement(Box, {
    key: props.key
  }, /*#__PURE__*/React.createElement(Text, {
    color: isFocused ? 'green' : 'black'
  }, props.trackName), /*#__PURE__*/React.createElement(Newline, null));
};
module.exports = PlaylistInfo;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsIkJveCIsIlRleHQiLCJOZXdsaW5lIiwidXNlRm9jdXMiLCJCaWdUZXh0IiwiR3JhZGllbnQiLCJheGlvcyIsIlBsYXlsaXN0SW5mbyIsInByb3BzIiwiZGF0YSIsInNldERhdGEiLCJwbGF5bGlzdCIsInNldFBsYXlsaXN0IiwidHJhY2tzIiwic2V0VHJhY2tzIiwiaXNGb2N1c2VkIiwicGxheWxpc3RJZCIsInRlbXAiLCJnZXQiLCJpdGVtcyIsIm1hcCIsIml0ZW0iLCJpIiwidHJhY2siLCJuYW1lIiwiZGlzcGxheV9uYW1lIiwicGxheWxpc3RJbmZvIiwiVHJhY2siLCJrZXkiLCJ0cmFja05hbWUiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiUGxheWxpc3RJbmZvLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9ID0gUmVhY3Q7XG5jb25zdCB7IEJveCwgVGV4dCwgTmV3bGluZSwgdXNlRm9jdXMgfSA9IHJlcXVpcmUoJ2luaycpO1xuY29uc3QgQmlnVGV4dCA9IHJlcXVpcmUoJ2luay1iaWctdGV4dCcpO1xuY29uc3QgR3JhZGllbnQgPSByZXF1aXJlKCdpbmstZ3JhZGllbnQnKVxuY29uc3QgYXhpb3MgPSByZXF1aXJlKCdheGlvcycpXG5cblxuLy8gU3BvdGlmeSBjbGllbnQgcmVxdWlyZWQgcGFyYW1ldGVyc1xuXG5jb25zdCBQbGF5bGlzdEluZm8gPSAocHJvcHMpID0+e1xuXG4gICAgY29uc3QgW2RhdGEsc2V0RGF0YV0gPSB1c2VTdGF0ZSgnJylcbiAgICBjb25zdCBbcGxheWxpc3Qsc2V0UGxheWxpc3RdID0gdXNlU3RhdGUobnVsbClcbiAgICBjb25zdCBbdHJhY2tzLHNldFRyYWNrc10gPSB1c2VTdGF0ZShbXSlcbiAgICBjb25zdCB7aXNGb2N1c2VkfSA9IHVzZUZvY3VzKClcblxuICAgIHVzZUVmZmVjdChhc3luYyAoKSA9PiB7XG4gICAgICAgIGlmKHBsYXlsaXN0ICE9PSAnJyAmJiBwcm9wcy5wbGF5bGlzdElkICE9ICcnKXtcbiAgICAgICAgICAgIGNvbnN0IHRlbXAgPSBhd2FpdCBheGlvcy5nZXQoYC9wbGF5bGlzdHMvJHtwcm9wcy5wbGF5bGlzdElkfS90cmFja3NgKVxuICAgICAgICAgICAgc2V0VHJhY2tzKHRlbXAuZGF0YS5pdGVtcy5tYXAoKGl0ZW0saSkgPT5cbiAgICAgICAgICAgICAgICA8VHJhY2sga2V5PXtpfSB0cmFja05hbWU9e2l0ZW0udHJhY2submFtZX0gLz5cbiAgICAgICAgICAgICkpXG4gICAgICAgIH1cbiAgICB9LFtwbGF5bGlzdF0pXG5cbiAgICB1c2VFZmZlY3QoYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCB0ZW1wID0gYXdhaXQgYXhpb3MuZ2V0KCcvbWUnKVxuICAgICAgICBzZXREYXRhKHRlbXAuZGF0YS5kaXNwbGF5X25hbWUpXG4gICAgfSxbXSlcblxuICAgIHVzZUVmZmVjdChhc3luYyAoKSA9PiB7XG4gICAgICAgIGlmKHByb3BzLnBsYXlsaXN0SWQgIT09ICcnKXtcbiAgICAgICAgICAgIGNvbnN0IHBsYXlsaXN0SW5mbyA9IGF3YWl0IGF4aW9zLmdldChgL3BsYXlsaXN0cy8ke3Byb3BzLnBsYXlsaXN0SWR9YClcbiAgICAgICAgICAgIHNldFBsYXlsaXN0KHBsYXlsaXN0SW5mbylcbiAgICAgICAgfVxuICAgIH0sW3Byb3BzLnBsYXlsaXN0SWRdKVxuXG4gICAgcmV0dXJuKFxuICAgICAgICA8Qm94IGhlaWdodD17XCIxMDAlXCJ9IHdpZHRoPXtcIjEwMCVcIn0gYm9yZGVyU3R5bGU9J3NpbmdsZScgZmxleERpcmVjdGlvbj0nY29sdW1uJyBhbGlnbkl0ZW1zPSdjZW50ZXInIGp1c3RpZnlDb250ZW50PSdjZW50ZXInIHBhZGRpbmc9ezJ9PlxuICAgICAgICAgICAgPEJpZ1RleHRcbiAgICAgICAgICAgICAgICBoZWlnaHQ9e1wiMjAlXCJ9XG4gICAgICAgICAgICAgIHRleHQ9IHtwbGF5bGlzdCA/IHBsYXlsaXN0LmRhdGEubmFtZSA6ICdQbGF5bGlzdCBOYW1lJ31cbiAgICAgICAgICAgICAgZm9udD0ndGlueSdcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICB7dHJhY2tzfVxuICAgICAgICA8L0JveD5cbiAgICApXG59XG5cbmNvbnN0IFRyYWNrID0gKHByb3BzKSA9PntcbiAgICBjb25zdCB7aXNGb2N1c2VkfSA9IHVzZUZvY3VzKCk7XG5cbiAgICByZXR1cm4oXG4gICAgICAgIDxCb3gga2V5PXtwcm9wcy5rZXl9PlxuICAgICAgICAgICAgPFRleHQgY29sb3I9e2lzRm9jdXNlZCA/ICdncmVlbicgOiAnYmxhY2snfT57cHJvcHMudHJhY2tOYW1lfTwvVGV4dD5cbiAgICAgICAgICAgIDxOZXdsaW5lIC8+XG4gICAgICAgIDwvQm94PlxuICAgIClcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBQbGF5bGlzdEluZm87XG5cbiJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBTyxDQUFDO0FBQzlCLE1BQU07RUFBRUMsUUFBUTtFQUFFQztBQUFVLENBQUMsR0FBR0gsS0FBSztBQUNyQyxNQUFNO0VBQUVJLEdBQUc7RUFBRUMsSUFBSTtFQUFFQyxPQUFPO0VBQUVDO0FBQVMsQ0FBQyxHQUFHTixPQUFPLENBQUMsS0FBSyxDQUFDO0FBQ3ZELE1BQU1PLE9BQU8sR0FBR1AsT0FBTyxDQUFDLGNBQWMsQ0FBQztBQUN2QyxNQUFNUSxRQUFRLEdBQUdSLE9BQU8sQ0FBQyxjQUFjLENBQUM7QUFDeEMsTUFBTVMsS0FBSyxHQUFHVCxPQUFPLENBQUMsT0FBTyxDQUFDOztBQUc5Qjs7QUFFQSxNQUFNVSxZQUFZLEdBQUlDLEtBQUssSUFBSTtFQUUzQixNQUFNLENBQUNDLElBQUksRUFBQ0MsT0FBTyxDQUFDLEdBQUdaLFFBQVEsQ0FBQyxFQUFFLENBQUM7RUFD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